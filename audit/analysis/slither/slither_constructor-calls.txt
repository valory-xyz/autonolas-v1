'npx hardhat compile --force' running
Compiled 113 Solidity files successfully

Solidity 0.8.14 is not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.

Learn more at https://hardhat.org/reference/solidity-support

@uniswap/v2-periphery/contracts/UniswapV2Router02.sol:12:1: Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
contract UniswapV2Router02 is IUniswapV2Router02 {
^ (Relevant source part starts here and spans across multiple lines).

Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IERC20.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-periphery/contracts/interfaces/IERC20.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-periphery/contracts/interfaces/IWETH.sol


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:15:23:
   |
15 |     function transfer(address to, uint256 amount) external virtual override returns (bool) {
   |                       ^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:15:35:
   |
15 |     function transfer(address to, uint256 amount) external virtual override returns (bool) {
   |                                   ^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:20:22:
   |
20 |     function approve(address spender, uint256 amount) external virtual override returns (bool) {
   |                      ^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:20:39:
   |
20 |     function approve(address spender, uint256 amount) external virtual override returns (bool) {
   |                                       ^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:25:27:
   |
25 |     function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {
   |                           ^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:25:41:
   |
25 |     function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {
   |                                         ^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:25:53:
   |
25 |     function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {
   |                                                     ^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:30:24:
   |
30 |     function allowance(address owner, address spender) external view virtual override returns (uint256)
   |                        ^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:30:39:
   |
30 |     function allowance(address owner, address spender) external view virtual override returns (uint256)
   |                                       ^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:36:24:
   |
36 |     function delegates(address account) external view virtual override returns (address)
   |                        ^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:42:23:
   |
42 |     function delegate(address delegatee) external virtual override
   |                       ^^^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:28:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                            ^^^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:47:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                               ^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:62:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                                              ^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:78:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                                                              ^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:87:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                                                                       ^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:98:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                                                                                  ^^^^^^^^^


Warning: Contract code size is 24918 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
 --> contracts/test/TestServiceRegistry.sol:8:1:
  |
8 | contract TestServiceRegistry is ServiceRegistry {
  | ^ (Relevant source part starts here and spans across multiple lines).




################################
####### UniswapV2Factory #######
################################

## Constructor Call Sequence
	- UniswapV2Factory

## Constructor Definitions

### UniswapV2Factory

     constructor(address _feeToSetter) public {
        feeToSetter = _feeToSetter;
    }

#############################
####### UniswapV2Pair #######
#############################

## Constructor Call Sequence
	- UniswapV2ERC20
	- UniswapV2Pair

## Constructor Definitions

### UniswapV2ERC20

     constructor() public {
        uint chainId;
        assembly {
            chainId := chainid
        }
        DOMAIN_SEPARATOR = keccak256(
            abi.encode(
                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),
                keccak256(bytes(name)),
                keccak256(bytes('1')),
                chainId,
                address(this)
            )
        );
    }

### UniswapV2Pair

     constructor() public {
        factory = msg.sender;
    }

#################################
####### UniswapV2Router02 #######
#################################

## Constructor Call Sequence
	- UniswapV2Router02

## Constructor Definitions

### UniswapV2Router02

     constructor(address _factory, address _WETH) public {
        factory = _factory;
        WETH = _WETH;
    }

###############################
####### GnosisSafeProxy #######
###############################

## Constructor Call Sequence
	- GnosisSafeProxy

## Constructor Definitions

### GnosisSafeProxy

     constructor(address _singleton) {
        require(_singleton != address(0), "Invalid singleton address provided");
        singleton = _singleton;
    }

##################################
####### GnosisSafeMultisig #######
##################################

## Constructor Call Sequence
	- GnosisSafeMultisig

## Constructor Definitions

### GnosisSafeMultisig

     constructor (address payable _gnosisSafeL2, address _gnosisSafeProxyFactory) {
        gnosisSafeL2 = _gnosisSafeL2;
        gnosisSafeProxyFactory = _gnosisSafeProxyFactory;
    }

############################
####### GnosisSafeL2 #######
############################

## Constructor Call Sequence
	- GnosisSafe

## Constructor Definitions

### GnosisSafe

     constructor() {
        // By setting the threshold it is not possible to call setup anymore,
        // so we create a Safe with 0 owners and threshold 1.
        // This is an unusable Safe, perfect for the singleton
        threshold = 1;
    }

################################
####### GovernorBravoOLA #######
################################

## Constructor Call Sequence
	- EIP712
	- Governor
	- GovernorSettings
	- GovernorVotes
	- GovernorVotesQuorumFraction
	- GovernorTimelockControl
	- GovernorBravoOLA

## Constructor Definitions

### EIP712

     constructor(string memory name, string memory version) {
        bytes32 hashedName = keccak256(bytes(name));
        bytes32 hashedVersion = keccak256(bytes(version));
        bytes32 typeHash = keccak256(
            "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
        );
        _HASHED_NAME = hashedName;
        _HASHED_VERSION = hashedVersion;
        _CACHED_CHAIN_ID = block.chainid;
        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);
        _CACHED_THIS = address(this);
        _TYPE_HASH = typeHash;
    }

### Governor

     constructor(string memory name_) EIP712(name_, version()) {
        _name = name_;
    }

### GovernorSettings

     constructor(
        uint256 initialVotingDelay,
        uint256 initialVotingPeriod,
        uint256 initialProposalThreshold
    ) {
        _setVotingDelay(initialVotingDelay);
        _setVotingPeriod(initialVotingPeriod);
        _setProposalThreshold(initialProposalThreshold);
    }

### GovernorVotes

     constructor(IVotes tokenAddress) {
        token = tokenAddress;
    }

### GovernorVotesQuorumFraction

     constructor(uint256 quorumNumeratorValue) {
        _updateQuorumNumerator(quorumNumeratorValue);
    }

### GovernorTimelockControl

     constructor(TimelockController timelockAddress) {
        _updateTimelock(timelockAddress);
    }

### GovernorBravoOLA

     constructor(
        IVotes governanceToken,
        TimelockController timelock,
        uint256 initialVotingDelay,
        uint256 initialVotingPeriod,
        uint256 initialProposalThreshold,
        uint256 quorumFraction
    )
        Governor("GovernorBravoOLA")
        GovernorSettings(initialVotingDelay, initialVotingPeriod, initialProposalThreshold)
        GovernorVotes(governanceToken)
        GovernorVotesQuorumFraction(quorumFraction)
        GovernorTimelockControl(timelock)
    {}

########################
####### Timelock #######
########################

## Constructor Call Sequence
	- TimelockController
	- Timelock

## Constructor Definitions

### TimelockController

     constructor(
        uint256 minDelay,
        address[] memory proposers,
        address[] memory executors
    ) {
        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);
        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);
        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);
        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);

        // deployer + self administration
        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());
        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));

        // register proposers and cancellers
        for (uint256 i = 0; i < proposers.length; ++i) {
            _setupRole(PROPOSER_ROLE, proposers[i]);
            _setupRole(CANCELLER_ROLE, proposers[i]);
        }

        // register executors
        for (uint256 i = 0; i < executors.length; ++i) {
            _setupRole(EXECUTOR_ROLE, executors[i]);
        }

        _minDelay = minDelay;
        emit MinDelayChange(0, minDelay);
    }

### Timelock

     constructor(uint256 minDelay, address[] memory proposers, address[] memory executors)
        TimelockController(minDelay, proposers, executors)
    {}

############################
####### VotingEscrow #######
############################

## Constructor Call Sequence
	- ReentrancyGuard
	- VotingEscrow

## Constructor Definitions

### ReentrancyGuard

     constructor() {
        _status = _NOT_ENTERED;
    }

### VotingEscrow

     constructor(address _token, string memory _name, string memory _symbol)
    {
        token = _token;
        name = _name;
        symbol = _symbol;
        decimals = ERC20(_token).decimals();
        // Create initial point such that default timestamp and block number are not zero
        mapSupplyPoints[0] = PointVoting(0, 0, block.timestamp, block.number, 0);
    }

#############################
####### AgentRegistry #######
#############################

## Constructor Call Sequence
	- ERC721
	- Ownable
	- ReentrancyGuard
	- AgentRegistry

## Constructor Definitions

### ERC721

     constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### ReentrancyGuard

     constructor() {
        _status = _NOT_ENTERED;
    }

### AgentRegistry

     constructor(string memory _name, string memory _symbol, string memory _bURI, address _componentRegistry)
        ERC721(_name, _symbol) {
        _BASEURI = _bURI;
        componentRegistry = _componentRegistry;
    }

#################################
####### ComponentRegistry #######
#################################

## Constructor Call Sequence
	- ERC721
	- Ownable
	- ReentrancyGuard
	- ComponentRegistry

## Constructor Definitions

### ERC721

     constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### ReentrancyGuard

     constructor() {
        _status = _NOT_ENTERED;
    }

### ComponentRegistry

     constructor(string memory _name, string memory _symbol, string memory _bURI) ERC721(_name, _symbol) {
        _BASEURI = _bURI;
    }

#################################
####### RegistriesManager #######
#################################

## Constructor Call Sequence
	- Ownable
	- Pausable
	- RegistriesManager

## Constructor Definitions

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### Pausable

     constructor() {
        _paused = false;
    }

### RegistriesManager

     constructor(address _componentRegistry, address _agentRegistry) {
        componentRegistry = _componentRegistry;
        agentRegistry = _agentRegistry;
    }

##############################
####### ServiceManager #######
##############################

## Constructor Call Sequence
	- Ownable
	- Pausable
	- ServiceManager

## Constructor Definitions

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### Pausable

     constructor() {
        _paused = false;
    }

### ServiceManager

     constructor(address _serviceRegistry, address _treasury) {
        serviceRegistry = _serviceRegistry;
        treasury = _treasury;
    }

##########################
####### ERC20Token #######
##########################

## Constructor Call Sequence
	- ERC20
	- Ownable
	- ERC20Token

## Constructor Definitions

### ERC20

     constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### ERC20Token

     constructor() ERC20("ERC20 generic mocking token", "ERC20Token") {}

###################################
####### TestServiceRegistry #######
###################################

## Constructor Call Sequence
	- Ownable
	- ERC721
	- ReentrancyGuard
	- ServiceRegistry
	- TestServiceRegistry

## Constructor Definitions

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### ERC721

     constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

### ReentrancyGuard

     constructor() {
        _status = _NOT_ENTERED;
    }

### ServiceRegistry

     constructor(string memory _name, string memory _symbol, address _agentRegistry) ERC721(_name, _symbol)
    {
        agentRegistry = _agentRegistry;
    }

### TestServiceRegistry

     constructor(string memory _name, string memory _symbol, address _agentRegistry)
        ServiceRegistry(_name, _symbol, _agentRegistry) {}

##########################
####### Depository #######
##########################

## Constructor Call Sequence
	- Ownable
	- Depository

## Constructor Definitions

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### Depository

     constructor(address _ola, address _treasury, address _tokenomics) {
        ola = _ola;
        treasury = _treasury;
        tokenomics = _tokenomics;
    }

#########################
####### Dispenser #######
#########################

## Constructor Call Sequence
	- Ownable
	- Pausable
	- ReentrancyGuard
	- Dispenser

## Constructor Definitions

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### Pausable

     constructor() {
        _paused = false;
    }

### ReentrancyGuard

     constructor() {
        _status = _NOT_ENTERED;
    }

### Dispenser

     constructor(address _ola, address _tokenomics) {
        ola = _ola;
        tokenomics = _tokenomics;
    }

###################
####### OLA #######
###################

## Constructor Call Sequence
	- Ownable
	- ERC20
	- EIP712
	- ERC20Permit
	- OLA

## Constructor Definitions

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### ERC20

     constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

### EIP712

     constructor(string memory name, string memory version) {
        bytes32 hashedName = keccak256(bytes(name));
        bytes32 hashedVersion = keccak256(bytes(version));
        bytes32 typeHash = keccak256(
            "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
        );
        _HASHED_NAME = hashedName;
        _HASHED_VERSION = hashedVersion;
        _CACHED_CHAIN_ID = block.chainid;
        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);
        _CACHED_THIS = address(this);
        _TYPE_HASH = typeHash;
    }

### ERC20Permit

     constructor(string memory name) EIP712(name, "1") {}

### OLA

     constructor(uint256 _supply, address _minter) ERC20("OLA Token", "OLA") ERC20Permit("OLA Token") {
        minter = _minter;
        timeLaunch = block.timestamp;
        if (_supply > 0) {
            super._mint(msg.sender, _supply);
        }
    }

##########################
####### Tokenomics #######
##########################

## Constructor Call Sequence
	- Ownable
	- Tokenomics

## Constructor Definitions

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### Tokenomics

     constructor(address _ola, address _treasury, address _depository, address _dispenser, address _ve, uint256 _epochLen,
        address _componentRegistry, address _agentRegistry, address payable _serviceRegistry)
    {
        ola = _ola;
        treasury = _treasury;
        depository = _depository;
        dispenser = _dispenser;
        ve = _ve;
        epochLen = _epochLen;
        componentRegistry = _componentRegistry;
        agentRegistry = _agentRegistry;
        serviceRegistry = _serviceRegistry;
        decimalsUnit = 10 ** IOLA(_ola).decimals();

        inflationCaps = new uint[](10);
        inflationCaps[0] = 520_000_000e18;
        inflationCaps[1] = 590_000_000e18;
        inflationCaps[2] = 660_000_000e18;
        inflationCaps[3] = 730_000_000e18;
        inflationCaps[4] = 790_000_000e18;
        inflationCaps[5] = 840_000_000e18;
        inflationCaps[6] = 890_000_000e18;
        inflationCaps[7] = 930_000_000e18;
        inflationCaps[8] = 970_000_000e18;
        inflationCaps[9] = 1_000_000_000e18;
    }

########################
####### Treasury #######
########################

## Constructor Call Sequence
	- Ownable
	- ReentrancyGuard
	- Treasury

## Constructor Definitions

### Ownable

     constructor() {
        _transferOwnership(_msgSender());
    }

### ReentrancyGuard

     constructor() {
        _status = _NOT_ENTERED;
    }

### Treasury

     constructor(address _ola, address _depository, address _tokenomics, address _dispenser) payable {
        if (_ola == address(0)) {
            revert ZeroAddress();
        }
        ola = _ola;
        ETHOwned = msg.value;
        depository = _depository;
        dispenser = _dispenser;
        tokenomics = _tokenomics;
    }

. analyzed (126 contracts)
