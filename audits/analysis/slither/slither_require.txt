'npx hardhat compile --force' running
Compiled 113 Solidity files successfully

Solidity 0.8.14 is not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.

Learn more at https://hardhat.org/reference/solidity-support

@uniswap/v2-periphery/contracts/UniswapV2Router02.sol:12:1: Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
contract UniswapV2Router02 is IUniswapV2Router02 {
^ (Relevant source part starts here and spans across multiple lines).

Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IERC20.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-periphery/contracts/interfaces/IERC20.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol


Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> @uniswap/v2-periphery/contracts/interfaces/IWETH.sol


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:15:23:
   |
15 |     function transfer(address to, uint256 amount) external virtual override returns (bool) {
   |                       ^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:15:35:
   |
15 |     function transfer(address to, uint256 amount) external virtual override returns (bool) {
   |                                   ^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:20:22:
   |
20 |     function approve(address spender, uint256 amount) external virtual override returns (bool) {
   |                      ^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:20:39:
   |
20 |     function approve(address spender, uint256 amount) external virtual override returns (bool) {
   |                                       ^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:25:27:
   |
25 |     function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {
   |                           ^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:25:41:
   |
25 |     function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {
   |                                         ^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:25:53:
   |
25 |     function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {
   |                                                     ^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:30:24:
   |
30 |     function allowance(address owner, address spender) external view virtual override returns (uint256)
   |                        ^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:30:39:
   |
30 |     function allowance(address owner, address spender) external view virtual override returns (uint256)
   |                                       ^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:36:24:
   |
36 |     function delegates(address account) external view virtual override returns (address)
   |                        ^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:42:23:
   |
42 |     function delegate(address delegatee) external virtual override
   |                       ^^^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:28:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                            ^^^^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:47:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                               ^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:62:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                                              ^^^^^^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:78:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                                                              ^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:87:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                                                                       ^^^^^^^^^


Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  --> contracts/governance/ERC20VotesNonTransferable.sol:48:98:
   |
48 |     function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)
   |                                                                                                  ^^^^^^^^^


Warning: Contract code size is 24918 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
 --> contracts/test/TestServiceRegistry.sol:8:1:
  |
8 | contract TestServiceRegistry is ServiceRegistry {
  | ^ (Relevant source part starts here and spans across multiple lines).




Contract UniswapV2Factory
+----------------+------------------------------------------------------------------------------------+
|    Function    |                                 require or assert                                  |
+----------------+------------------------------------------------------------------------------------+
|     feeTo      |                                                                                    |
|  feeToSetter   |                                                                                    |
|    getPair     |                                                                                    |
|    allPairs    |                                                                                    |
| allPairsLength |                                                                                    |
|   createPair   |                                                                                    |
|    setFeeTo    |                                                                                    |
| setFeeToSetter |                                                                                    |
|  constructor   |                                                                                    |
| allPairsLength |                                                                                    |
|   createPair   |       require(bool,string)(tokenA != tokenB,UniswapV2: IDENTICAL_ADDRESSES)        |
|                |         require(bool,string)(token0 != address(0),UniswapV2: ZERO_ADDRESS)         |
|                | require(bool,string)(getPair[token0][token1] == address(0),UniswapV2: PAIR_EXISTS) |
|    setFeeTo    |        require(bool,string)(msg.sender == feeToSetter,UniswapV2: FORBIDDEN)        |
| setFeeToSetter |        require(bool,string)(msg.sender == feeToSetter,UniswapV2: FORBIDDEN)        |
+----------------+------------------------------------------------------------------------------------+

Contract UniswapV2Pair
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+
|               Function              |                                                       require or assert                                                       |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+
|             constructor             |                                                                                                                               |
|                _mint                |                                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                  |
|                _burn                |                                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                 |
|               _approve              |                                                                                                                               |
|              _transfer              |                                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                 |
|                                     |                                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                  |
|               approve               |                                                                                                                               |
|               transfer              |                                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                 |
|                                     |                                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                  |
|             transferFrom            |                                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                 |
|                                     |                                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                  |
|                permit               |         require(bool,string)(recoveredAddress != address(0) && recoveredAddress == owner,UniswapV2: INVALID_SIGNATURE)        |
|                                     |                              require(bool,string)(deadline >= block.timestamp,UniswapV2: EXPIRED)                             |
|                 name                |                                                                                                                               |
|                symbol               |                                                                                                                               |
|               decimals              |                                                                                                                               |
|             totalSupply             |                                                                                                                               |
|              balanceOf              |                                                                                                                               |
|              allowance              |                                                                                                                               |
|               approve               |                                                                                                                               |
|               transfer              |                                                                                                                               |
|             transferFrom            |                                                                                                                               |
|           DOMAIN_SEPARATOR          |                                                                                                                               |
|           PERMIT_TYPEHASH           |                                                                                                                               |
|                nonces               |                                                                                                                               |
|                permit               |                                                                                                                               |
|                 name                |                                                                                                                               |
|                symbol               |                                                                                                                               |
|               decimals              |                                                                                                                               |
|             totalSupply             |                                                                                                                               |
|              balanceOf              |                                                                                                                               |
|              allowance              |                                                                                                                               |
|               approve               |                                                                                                                               |
|               transfer              |                                                                                                                               |
|             transferFrom            |                                                                                                                               |
|           DOMAIN_SEPARATOR          |                                                                                                                               |
|           PERMIT_TYPEHASH           |                                                                                                                               |
|                nonces               |                                                                                                                               |
|                permit               |                                                                                                                               |
|          MINIMUM_LIQUIDITY          |                                                                                                                               |
|               factory               |                                                                                                                               |
|                token0               |                                                                                                                               |
|                token1               |                                                                                                                               |
|             getReserves             |                                                                                                                               |
|         price0CumulativeLast        |                                                                                                                               |
|         price1CumulativeLast        |                                                                                                                               |
|                kLast                |                                                                                                                               |
|                 mint                |                                                                                                                               |
|                 burn                |                                                                                                                               |
|                 swap                |                                                                                                                               |
|                 skim                |                                                                                                                               |
|                 sync                |                                                                                                                               |
|              initialize             |                                                                                                                               |
|             getReserves             |                                                                                                                               |
|            _safeTransfer            |           require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),UniswapV2: TRANSFER_FAILED)           |
|             constructor             |                                                                                                                               |
|              initialize             |                                require(bool,string)(msg.sender == factory,UniswapV2: FORBIDDEN)                               |
|               _update               |                 require(bool,string)(balance0 <= uint112(- 1) && balance1 <= uint112(- 1),UniswapV2: OVERFLOW)                |
|               _mintFee              |                                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                 |
|                                     |                           require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                           |
|                                     |                                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                  |
|                 mint                |                                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                  |
|                                     |                 require(bool,string)(balance0 <= uint112(- 1) && balance1 <= uint112(- 1),UniswapV2: OVERFLOW)                |
|                                     |                                     require(bool,string)(unlocked == 1,UniswapV2: LOCKED)                                     |
|                                     |                          require(bool,string)(liquidity > 0,UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED)                         |
|                                     |                           require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                           |
|                                     |                                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                 |
|                 burn                |                                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                  |
|                                     |                   require(bool,string)(amount0 > 0 && amount1 > 0,UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED)                   |
|                                     |                 require(bool,string)(balance0 <= uint112(- 1) && balance1 <= uint112(- 1),UniswapV2: OVERFLOW)                |
|                                     |           require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),UniswapV2: TRANSFER_FAILED)           |
|                                     |                                     require(bool,string)(unlocked == 1,UniswapV2: LOCKED)                                     |
|                                     |                           require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                           |
|                                     |                                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                 |
|                 swap                |                  require(bool,string)(amount0Out > 0 || amount1Out > 0,UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT)                 |
|                                     |                           require(bool,string)(to != _token0 && to != _token1,UniswapV2: INVALID_TO)                          |
|                                     |            require(bool,string)(amount0Out < _reserve0 && amount1Out < _reserve1,UniswapV2: INSUFFICIENT_LIQUIDITY)           |
|                                     |                 require(bool,string)(balance0 <= uint112(- 1) && balance1 <= uint112(- 1),UniswapV2: OVERFLOW)                |
|                                     | require(bool,string)(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000 ** 2),UniswapV2: K) |
|                                     |           require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),UniswapV2: TRANSFER_FAILED)           |
|                                     |                                     require(bool,string)(unlocked == 1,UniswapV2: LOCKED)                                     |
|                                     |                           require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                           |
|                                     |                   require(bool,string)(amount0In > 0 || amount1In > 0,UniswapV2: INSUFFICIENT_INPUT_AMOUNT)                   |
|                                     |                                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                 |
|                 skim                |           require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),UniswapV2: TRANSFER_FAILED)           |
|                                     |                                     require(bool,string)(unlocked == 1,UniswapV2: LOCKED)                                     |
|                                     |                                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                 |
|                 sync                |                 require(bool,string)(balance0 <= uint112(- 1) && balance1 <= uint112(- 1),UniswapV2: OVERFLOW)                |
|                                     |                                     require(bool,string)(unlocked == 1,UniswapV2: LOCKED)                                     |
|     slitherConstructorVariables     |                                                                                                                               |
| slitherConstructorConstantVariables |                                                                                                                               |
+-------------------------------------+-------------------------------------------------------------------------------------------------------------------------------+

Contract IERC20
+--------------+-------------------+
|   Function   | require or assert |
+--------------+-------------------+
|     name     |                   |
|    symbol    |                   |
|   decimals   |                   |
| totalSupply  |                   |
|  balanceOf   |                   |
|  allowance   |                   |
|   approve    |                   |
|   transfer   |                   |
| transferFrom |                   |
+--------------+-------------------+

Contract IUniswapV2Callee
+---------------+-------------------+
|    Function   | require or assert |
+---------------+-------------------+
| uniswapV2Call |                   |
+---------------+-------------------+

Contract Math
+----------+-------------------+
| Function | require or assert |
+----------+-------------------+
|   min    |                   |
|   sqrt   |                   |
+----------+-------------------+

Contract SafeMath
+----------+---------------------------------------------------------------------------+
| Function |                             require or assert                             |
+----------+---------------------------------------------------------------------------+
|   add    |        require(bool,string)((z = x + y) >= x,ds-math-add-overflow)        |
|   sub    |        require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)       |
|   mul    | require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow) |
+----------+---------------------------------------------------------------------------+

Contract UQ112x112
+-------------------------------------+-------------------+
|               Function              | require or assert |
+-------------------------------------+-------------------+
|                encode               |                   |
|                uqdiv                |                   |
| slitherConstructorConstantVariables |                   |
+-------------------------------------+-------------------+

Contract WETH9
+-----------------------------+--------------------------------------------------+
|           Function          |                require or assert                 |
+-----------------------------+--------------------------------------------------+
|           fallback          |                                                  |
|           deposit           |                                                  |
|           withdraw          |   require(bool)(balanceOf[msg.sender] >= wad)    |
|         totalSupply         |                                                  |
|           approve           |                                                  |
|           transfer          |       require(bool)(balanceOf[src] >= wad)       |
|                             | require(bool)(allowance[src][msg.sender] >= wad) |
|         transferFrom        |       require(bool)(balanceOf[src] >= wad)       |
|                             | require(bool)(allowance[src][msg.sender] >= wad) |
| slitherConstructorVariables |                                                  |
+-----------------------------+--------------------------------------------------+

Contract TransferHelper
+------------------+----------------------------------------------------------------------------------------------------------------------------------+
|     Function     |                                                        require or assert                                                         |
+------------------+----------------------------------------------------------------------------------------------------------------------------------+
|   safeApprove    |    require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeApprove: approve failed)    |
|   safeTransfer   |   require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeTransfer: transfer failed)   |
| safeTransferFrom | require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed) |
| safeTransferETH  |                        require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                        |
+------------------+----------------------------------------------------------------------------------------------------------------------------------+

Contract IUniswapV2Factory
+----------------+-------------------+
|    Function    | require or assert |
+----------------+-------------------+
|     feeTo      |                   |
|  feeToSetter   |                   |
|    getPair     |                   |
|    allPairs    |                   |
| allPairsLength |                   |
|   createPair   |                   |
|    setFeeTo    |                   |
| setFeeToSetter |                   |
+----------------+-------------------+

Contract IUniswapV2Pair
+----------------------+-------------------+
|       Function       | require or assert |
+----------------------+-------------------+
|         name         |                   |
|        symbol        |                   |
|       decimals       |                   |
|     totalSupply      |                   |
|      balanceOf       |                   |
|      allowance       |                   |
|       approve        |                   |
|       transfer       |                   |
|     transferFrom     |                   |
|   DOMAIN_SEPARATOR   |                   |
|   PERMIT_TYPEHASH    |                   |
|        nonces        |                   |
|        permit        |                   |
|  MINIMUM_LIQUIDITY   |                   |
|       factory        |                   |
|        token0        |                   |
|        token1        |                   |
|     getReserves      |                   |
| price0CumulativeLast |                   |
| price1CumulativeLast |                   |
|        kLast         |                   |
|         mint         |                   |
|         burn         |                   |
|         swap         |                   |
|         skim         |                   |
|         sync         |                   |
|      initialize      |                   |
+----------------------+-------------------+

Contract UniswapV2Router02
+-----------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
|                          Function                         |                                                                require or assert                                                                 |
+-----------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
|      removeLiquidityETHSupportingFeeOnTransferTokens      |                                                                                                                                                  |
| removeLiquidityETHWithPermitSupportingFeeOnTransferTokens |                                                                                                                                                  |
|   swapExactTokensForTokensSupportingFeeOnTransferTokens   |                                                                                                                                                  |
|     swapExactETHForTokensSupportingFeeOnTransferTokens    |                                                                                                                                                  |
|     swapExactTokensForETHSupportingFeeOnTransferTokens    |                                                                                                                                                  |
|                          factory                          |                                                                                                                                                  |
|                            WETH                           |                                                                                                                                                  |
|                        addLiquidity                       |                                                                                                                                                  |
|                      addLiquidityETH                      |                                                                                                                                                  |
|                      removeLiquidity                      |                                                                                                                                                  |
|                     removeLiquidityETH                    |                                                                                                                                                  |
|                 removeLiquidityWithPermit                 |                                                                                                                                                  |
|                removeLiquidityETHWithPermit               |                                                                                                                                                  |
|                  swapExactTokensForTokens                 |                                                                                                                                                  |
|                  swapTokensForExactTokens                 |                                                                                                                                                  |
|                   swapExactETHForTokens                   |                                                                                                                                                  |
|                   swapTokensForExactETH                   |                                                                                                                                                  |
|                   swapExactTokensForETH                   |                                                                                                                                                  |
|                   swapETHForExactTokens                   |                                                                                                                                                  |
|                           quote                           |                                                                                                                                                  |
|                        getAmountOut                       |                                                                                                                                                  |
|                        getAmountIn                        |                                                                                                                                                  |
|                       getAmountsOut                       |                                                                                                                                                  |
|                        getAmountsIn                       |                                                                                                                                                  |
|                        constructor                        |                                                                                                                                                  |
|                          receive                          |                                                         assert(bool)(msg.sender == WETH)                                                         |
|                       _addLiquidity                       |                           require(bool,string)(reserveA > 0 && reserveB > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                            |
|                                                           |                            require(bool,string)(amountBOptimal >= amountBMin,UniswapV2Router: INSUFFICIENT_B_AMOUNT)                             |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                     require(bool,string)(amountA > 0,UniswapV2Library: INSUFFICIENT_AMOUNT)                                      |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                                                  assert(bool)(amountAOptimal <= amountADesired)                                                  |
|                                                           |                            require(bool,string)(amountAOptimal >= amountAMin,UniswapV2Router: INSUFFICIENT_A_AMOUNT)                             |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                        addLiquidity                       |                           require(bool,string)(reserveA > 0 && reserveB > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                            |
|                                                           |                            require(bool,string)(amountBOptimal >= amountBMin,UniswapV2Router: INSUFFICIENT_B_AMOUNT)                             |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                                     require(bool,string)(amountA > 0,UniswapV2Library: INSUFFICIENT_AMOUNT)                                      |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                                                  assert(bool)(amountAOptimal <= amountADesired)                                                  |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                            require(bool,string)(amountAOptimal >= amountAMin,UniswapV2Router: INSUFFICIENT_A_AMOUNT)                             |
|                                                           |         require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed)         |
|                      addLiquidityETH                      |                           require(bool,string)(reserveA > 0 && reserveB > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                            |
|                                                           |                            require(bool,string)(amountBOptimal >= amountBMin,UniswapV2Router: INSUFFICIENT_B_AMOUNT)                             |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                                     require(bool,string)(amountA > 0,UniswapV2Library: INSUFFICIENT_AMOUNT)                                      |
|                                                           |                                require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                                                  assert(bool)(amountAOptimal <= amountADesired)                                                  |
|                                                           |                                                assert(bool)(IWETH(WETH).transfer(pair,amountETH))                                                |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                            require(bool,string)(amountAOptimal >= amountAMin,UniswapV2Router: INSUFFICIENT_A_AMOUNT)                             |
|                                                           |         require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed)         |
|                      removeLiquidity                      |                                require(bool,string)(amountB >= amountBMin,UniswapV2Router: INSUFFICIENT_B_AMOUNT)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                require(bool,string)(amountA >= amountAMin,UniswapV2Router: INSUFFICIENT_A_AMOUNT)                                |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                     removeLiquidityETH                    |                                require(bool,string)(amountB >= amountBMin,UniswapV2Router: INSUFFICIENT_B_AMOUNT)                                |
|                                                           |                                require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |           require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeTransfer: transfer failed)           |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                require(bool,string)(amountA >= amountAMin,UniswapV2Router: INSUFFICIENT_A_AMOUNT)                                |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                 removeLiquidityWithPermit                 |                                require(bool,string)(amountB >= amountBMin,UniswapV2Router: INSUFFICIENT_B_AMOUNT)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                require(bool,string)(amountA >= amountAMin,UniswapV2Router: INSUFFICIENT_A_AMOUNT)                                |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                removeLiquidityETHWithPermit               |                                require(bool,string)(amountB >= amountBMin,UniswapV2Router: INSUFFICIENT_B_AMOUNT)                                |
|                                                           |                                require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |           require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeTransfer: transfer failed)           |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                require(bool,string)(amountA >= amountAMin,UniswapV2Router: INSUFFICIENT_A_AMOUNT)                                |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|      removeLiquidityETHSupportingFeeOnTransferTokens      |                                require(bool,string)(amountB >= amountBMin,UniswapV2Router: INSUFFICIENT_B_AMOUNT)                                |
|                                                           |                                require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |           require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeTransfer: transfer failed)           |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                require(bool,string)(amountA >= amountAMin,UniswapV2Router: INSUFFICIENT_A_AMOUNT)                                |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
| removeLiquidityETHWithPermitSupportingFeeOnTransferTokens |                                require(bool,string)(amountB >= amountBMin,UniswapV2Router: INSUFFICIENT_B_AMOUNT)                                |
|                                                           |                                require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |           require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeTransfer: transfer failed)           |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                require(bool,string)(amountA >= amountAMin,UniswapV2Router: INSUFFICIENT_A_AMOUNT)                                |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                           _swap                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                  swapExactTokensForTokens                 |                  require(bool,string)(amounts[amounts.length - 1] >= amountOutMin,UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT)                   |
|                                                           |         require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed)         |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                  require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)                                  |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                      require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)                                       |
|                  swapTokensForExactTokens                 |                                      require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)                                       |
|                                                           |                             require(bool,string)(amounts[0] <= amountInMax,UniswapV2Router: EXCESSIVE_INPUT_AMOUNT)                              |
|                                                           |                                           require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                           |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                 require(bool,string)(amountOut > 0,UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT)                                 |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |         require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed)         |
|                   swapExactETHForTokens                   |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                  require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)                                  |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                       require(bool,string)(path[0] == WETH,UniswapV2Router: INVALID_PATH)                                        |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                         assert(bool)(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory,path[0],path[1]),amounts[0]))                         |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                  require(bool,string)(amounts[amounts.length - 1] >= amountOutMin,UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT)                   |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                      require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)                                       |
|                   swapTokensForExactETH                   |                                      require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)                                       |
|                                                           |                                require(bool,string)(path[path.length - 1] == WETH,UniswapV2Router: INVALID_PATH)                                 |
|                                                           |                                           require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                           |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                 require(bool,string)(amountOut > 0,UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT)                                 |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                                require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                             require(bool,string)(amounts[0] <= amountInMax,UniswapV2Router: EXCESSIVE_INPUT_AMOUNT)                              |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |         require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed)         |
|                   swapExactTokensForETH                   |         require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed)         |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                  require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)                                  |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                                require(bool,string)(path[path.length - 1] == WETH,UniswapV2Router: INVALID_PATH)                                 |
|                                                           |                                require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                  require(bool,string)(amounts[amounts.length - 1] >= amountOutMin,UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT)                   |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                      require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)                                       |
|                   swapETHForExactTokens                   |                                      require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)                                       |
|                                                           |                                       require(bool,string)(path[0] == WETH,UniswapV2Router: INVALID_PATH)                                        |
|                                                           |                                           require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                           |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                         assert(bool)(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory,path[0],path[1]),amounts[0]))                         |
|                                                           |                                 require(bool,string)(amountOut > 0,UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT)                                 |
|                                                           |                                require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                                |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                              require(bool,string)(amounts[0] <= msg.value,UniswapV2Router: EXCESSIVE_INPUT_AMOUNT)                               |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|             _swapSupportingFeeOnTransferTokens            |                                           require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                           |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                  require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)                                  |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|   swapExactTokensForTokensSupportingFeeOnTransferTokens   | require(bool,string)(IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT) |
|                                                           |                                           require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                           |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                  require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)                                  |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |         require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed)         |
|     swapExactETHForTokensSupportingFeeOnTransferTokens    |                                       require(bool,string)(path[0] == WETH,UniswapV2Router: INVALID_PATH)                                        |
|                                                           |                                           require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                           |
|                                                           |                          assert(bool)(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory,path[0],path[1]),amountIn))                          |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                  require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)                                  |
|                                                           | require(bool,string)(IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT) |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|     swapExactTokensForETHSupportingFeeOnTransferTokens    |                                           require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                           |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                  require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)                                  |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                                require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                                |
|                                                           |                                require(bool,string)(path[path.length - 1] == WETH,UniswapV2Router: INVALID_PATH)                                 |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                                    require(bool,string)(deadline >= block.timestamp,UniswapV2Router: EXPIRED)                                    |
|                                                           |                           require(bool,string)(amountOut >= amountOutMin,UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT)                            |
|                                                           |         require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed)         |
|                           quote                           |                                     require(bool,string)(amountA > 0,UniswapV2Library: INSUFFICIENT_AMOUNT)                                      |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                           require(bool,string)(reserveA > 0 && reserveB > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                            |
|                        getAmountOut                       |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                  require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)                                  |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                        getAmountIn                        |                                           require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                           |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                 require(bool,string)(amountOut > 0,UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT)                                 |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                       getAmountsOut                       |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                  require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)                                  |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                                      require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)                                       |
|                        getAmountsIn                       |                                      require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)                                       |
|                                                           |                                           require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                                           |
|                                                           |                                    require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)                                     |
|                                                           |                                           require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                                            |
|                                                           |                                 require(bool,string)(amountOut > 0,UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT)                                 |
|                                                           |                                    require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)                                     |
|                                                           |                          require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)                          |
|                                                           |                                   require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)                                   |
+-----------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------+

Contract IERC20
+--------------+-------------------+
|   Function   | require or assert |
+--------------+-------------------+
|     name     |                   |
|    symbol    |                   |
|   decimals   |                   |
| totalSupply  |                   |
|  balanceOf   |                   |
|  allowance   |                   |
|   approve    |                   |
|   transfer   |                   |
| transferFrom |                   |
+--------------+-------------------+

Contract IWETH
+----------+-------------------+
| Function | require or assert |
+----------+-------------------+
| deposit  |                   |
| transfer |                   |
| withdraw |                   |
+----------+-------------------+

Contract SafeMath
+----------+---------------------------------------------------------------------------+
| Function |                             require or assert                             |
+----------+---------------------------------------------------------------------------+
|   add    |        require(bool,string)((z = x + y) >= x,ds-math-add-overflow)        |
|   sub    |        require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)       |
|   mul    | require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow) |
+----------+---------------------------------------------------------------------------+

Contract UniswapV2Library
+---------------+------------------------------------------------------------------------------------------------+
|    Function   |                                       require or assert                                        |
+---------------+------------------------------------------------------------------------------------------------+
|   sortTokens  |           require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)            |
|               |          require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)          |
|    pairFor    |           require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)            |
|               |          require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)          |
|  getReserves  |           require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)            |
|               |          require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)          |
|     quote     |            require(bool,string)(amountA > 0,UniswapV2Library: INSUFFICIENT_AMOUNT)             |
|               |           require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)            |
|               |  require(bool,string)(reserveA > 0 && reserveB > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY)   |
|  getAmountOut |           require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)            |
|               |         require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)         |
|               | require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY) |
|               |                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                   |
|  getAmountIn  |                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                  |
|               |           require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)            |
|               |                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                   |
|               |        require(bool,string)(amountOut > 0,UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT)        |
|               | require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY) |
| getAmountsOut |           require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)            |
|               |         require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)         |
|               |                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                   |
|               |          require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)          |
|               |           require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)            |
|               | require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY) |
|               |             require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)              |
|  getAmountsIn |             require(bool,string)(path.length >= 2,UniswapV2Library: INVALID_PATH)              |
|               |                  require(bool,string)((z = x - y) <= x,ds-math-sub-underflow)                  |
|               |           require(bool,string)(y == 0 || (z = x * y) / y == x,ds-math-mul-overflow)            |
|               |                  require(bool,string)((z = x + y) >= x,ds-math-add-overflow)                   |
|               |        require(bool,string)(amountOut > 0,UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT)        |
|               |           require(bool,string)(token0 != address(0),UniswapV2Library: ZERO_ADDRESS)            |
|               | require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY) |
|               |          require(bool,string)(tokenA != tokenB,UniswapV2Library: IDENTICAL_ADDRESSES)          |
+---------------+------------------------------------------------------------------------------------------------+

Contract IProxy
+------------+-------------------+
|  Function  | require or assert |
+------------+-------------------+
| masterCopy |                   |
+------------+-------------------+

Contract GnosisSafeProxy
+-------------+-----------------------------------------------------------------------------------+
|   Function  |                                 require or assert                                 |
+-------------+-----------------------------------------------------------------------------------+
| constructor | require(bool,string)(_singleton != address(0),Invalid singleton address provided) |
|   fallback  |                                                                                   |
+-------------+-----------------------------------------------------------------------------------+

Contract GnosisSafeProxyFactory
+--------------------------------------+------------------------------------------------------------------------+
|               Function               |                           require or assert                            |
+--------------------------------------+------------------------------------------------------------------------+
|             createProxy              |                                                                        |
|           proxyRuntimeCode           |                                                                        |
|          proxyCreationCode           |                                                                        |
|         deployProxyWithNonce         | require(bool,string)(address(proxy) != address(0),Create2 call failed) |
|         createProxyWithNonce         | require(bool,string)(address(proxy) != address(0),Create2 call failed) |
|       createProxyWithCallback        | require(bool,string)(address(proxy) != address(0),Create2 call failed) |
| calculateCreateProxyWithNonceAddress | require(bool,string)(address(proxy) != address(0),Create2 call failed) |
+--------------------------------------+------------------------------------------------------------------------+

Contract IProxyCreationCallback
+--------------+-------------------+
|   Function   | require or assert |
+--------------+-------------------+
| proxyCreated |                   |
+--------------+-------------------+

Contract GnosisSafeMultisig
+-------------------------------------+-------------------+
|               Function              | require or assert |
+-------------------------------------+-------------------+
|             constructor             |                   |
|              _parseData             |                   |
|                create               |                   |
| slitherConstructorConstantVariables |                   |
+-------------------------------------+-------------------+

Contract GnosisSafeL2
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
|               Function              |                                                       require or assert                                                        |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+
|             constructor             |                                                                                                                                |
|                setup                |                              require(bool,string)(transferToken(gasToken,receiver,payment),GS012)                              |
|                                     |                              require(bool,string)(modules[SENTINEL_MODULES] == address(0),GS100)                               |
|                                     |                     require(bool,string)(execute(to,0,data,Enum.Operation.DelegateCall,gasleft()()),GS000)                     |
|                                     | require(bool,string)(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner,GS203) |
|                                     |                                                   require(bool)(c / a == b)                                                    |
|                                     |                                       require(bool,string)(receiver.send(payment),GS011)                                       |
|                                     |                                                     require(bool)(c >= a)                                                      |
|                                     |                                           require(bool,string)(threshold == 0,GS200)                                           |
|                                     |                                    require(bool,string)(owners[owner] == address(0),GS204)                                     |
|                                     |                                    require(bool,string)(_threshold <= _owners.length,GS201)                                    |
|                                     |                                          require(bool,string)(_threshold >= 1,GS202)                                           |
|           execTransaction           |             require(bool,string)(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0,GS025)              |
|                                     |                              require(bool,string)(transferToken(gasToken,receiver,payment),GS012)                              |
|                                     |                 require(bool,string)(gasleft()() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500,GS010)                 |
|                                     |                                                     require(bool)(b <= a)                                                      |
|                                     | require(bool,string)(ISignatureValidator(currentOwner).isValidSignature(data,contractSignature) == EIP1271_MAGIC_VALUE,GS024)  |
|                                     | require(bool,string)(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS,GS026)  |
|                                     |                              require(bool,string)(uint256(s) >= requiredSignatures.mul(65),GS021)                              |
|                                     |                                                   require(bool)(c / a == b)                                                    |
|                                     |                                           require(bool,string)(_threshold > 0,GS001)                                           |
|                                     |                                       require(bool,string)(receiver.send(payment),GS011)                                       |
|                                     |                                                     require(bool)(c >= a)                                                      |
|                                     |                              require(bool,string)(uint256(s).add(32) <= signatures.length,GS022)                               |
|                                     |                 require(bool,string)(uint256(s).add(32).add(contractSignatureLen) <= signatures.length,GS023)                  |
|                                     |                             require(bool,string)(success || safeTxGas != 0 || gasPrice != 0,GS013)                             |
|                                     |                          require(bool,string)(signatures.length >= requiredSignatures.mul(65),GS020)                           |
|            handlePayment            |                              require(bool,string)(transferToken(gasToken,receiver,payment),GS012)                              |
|                                     |                                                   require(bool)(c / a == b)                                                    |
|                                     |                                       require(bool,string)(receiver.send(payment),GS011)                                       |
|                                     |                                                     require(bool)(c >= a)                                                      |
|           checkSignatures           |             require(bool,string)(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0,GS025)              |
|                                     | require(bool,string)(ISignatureValidator(currentOwner).isValidSignature(data,contractSignature) == EIP1271_MAGIC_VALUE,GS024)  |
|                                     | require(bool,string)(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS,GS026)  |
|                                     |                              require(bool,string)(uint256(s) >= requiredSignatures.mul(65),GS021)                              |
|                                     |                                                   require(bool)(c / a == b)                                                    |
|                                     |                                           require(bool,string)(_threshold > 0,GS001)                                           |
|                                     |                                                     require(bool)(c >= a)                                                      |
|                                     |                              require(bool,string)(uint256(s).add(32) <= signatures.length,GS022)                               |
|                                     |                 require(bool,string)(uint256(s).add(32).add(contractSignatureLen) <= signatures.length,GS023)                  |
|                                     |                          require(bool,string)(signatures.length >= requiredSignatures.mul(65),GS020)                           |
|           checkNSignatures          |             require(bool,string)(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0,GS025)              |
|                                     | require(bool,string)(ISignatureValidator(currentOwner).isValidSignature(data,contractSignature) == EIP1271_MAGIC_VALUE,GS024)  |
|                                     | require(bool,string)(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS,GS026)  |
|                                     |                              require(bool,string)(uint256(s) >= requiredSignatures.mul(65),GS021)                              |
|                                     |                                                   require(bool)(c / a == b)                                                    |
|                                     |                                                     require(bool)(c >= a)                                                      |
|                                     |                              require(bool,string)(uint256(s).add(32) <= signatures.length,GS022)                               |
|                                     |                 require(bool,string)(uint256(s).add(32).add(contractSignatureLen) <= signatures.length,GS023)                  |
|                                     |                          require(bool,string)(signatures.length >= requiredSignatures.mul(65),GS020)                           |
|            requiredTxGas            |                                  require(bool)(execute(to,value,data,operation,gasleft()()))                                   |
|             approveHash             |                                  require(bool,string)(owners[msg.sender] != address(0),GS030)                                  |
|              getChainId             |                                                                                                                                |
|           domainSeparator           |                                                                                                                                |
|        encodeTransactionData        |                                                                                                                                |
|          getTransactionHash         |                                                                                                                                |
|               setGuard              |                                    require(bool,string)(msg.sender == address(this),GS031)                                     |
|               getGuard              |                                                                                                                                |
|           requireSelfCall           |                                    require(bool,string)(msg.sender == address(this),GS031)                                     |
|             getStorageAt            |                                                                                                                                |
|          simulateAndRevert          |                                                                                                                                |
|      internalSetFallbackHandler     |                                                                                                                                |
|          setFallbackHandler         |                                    require(bool,string)(msg.sender == address(this),GS031)                                     |
|               fallback              |                                                                                                                                |
|            transferToken            |                                                                                                                                |
|            signatureSplit           |                                                                                                                                |
|             setupOwners             | require(bool,string)(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner,GS203) |
|                                     |                                           require(bool,string)(threshold == 0,GS200)                                           |
|                                     |                                    require(bool,string)(owners[owner] == address(0),GS204)                                     |
|                                     |                                    require(bool,string)(_threshold <= _owners.length,GS201)                                    |
|                                     |                                          require(bool,string)(_threshold >= 1,GS202)                                           |
|        addOwnerWithThreshold        |                                    require(bool,string)(owners[owner] == address(0),GS204)                                     |
|                                     |                                      require(bool,string)(_threshold <= ownerCount,GS201)                                      |
|                                     |                                          require(bool,string)(_threshold >= 1,GS202)                                           |
|                                     |                                    require(bool,string)(msg.sender == address(this),GS031)                                     |
|                                     |             require(bool,string)(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this),GS203)              |
|             removeOwner             |                                    require(bool,string)(ownerCount - 1 >= _threshold,GS201)                                    |
|                                     |                          require(bool,string)(owner != address(0) && owner != SENTINEL_OWNERS,GS203)                           |
|                                     |                                      require(bool,string)(_threshold <= ownerCount,GS201)                                      |
|                                     |                                     require(bool,string)(owners[prevOwner] == owner,GS205)                                     |
|                                     |                                    require(bool,string)(msg.sender == address(this),GS031)                                     |
|                                     |                                          require(bool,string)(_threshold >= 1,GS202)                                           |
|              swapOwner              |         require(bool,string)(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this),GS203)         |
|                                     |                                   require(bool,string)(owners[newOwner] == address(0),GS204)                                   |
|                                     |                       require(bool,string)(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS,GS203)                        |
|                                     |                                    require(bool,string)(msg.sender == address(this),GS031)                                     |
|                                     |                                   require(bool,string)(owners[prevOwner] == oldOwner,GS205)                                    |
|           changeThreshold           |                                    require(bool,string)(msg.sender == address(this),GS031)                                     |
|                                     |                                      require(bool,string)(_threshold <= ownerCount,GS201)                                      |
|                                     |                                          require(bool,string)(_threshold >= 1,GS202)                                           |
|             getThreshold            |                                                                                                                                |
|               isOwner               |                                                                                                                                |
|              getOwners              |                                                                                                                                |
|             setupModules            |                              require(bool,string)(modules[SENTINEL_MODULES] == address(0),GS100)                               |
|                                     |                     require(bool,string)(execute(to,0,data,Enum.Operation.DelegateCall,gasleft()()),GS000)                     |
|             enableModule            |                                    require(bool,string)(msg.sender == address(this),GS031)                                     |
|                                     |                                   require(bool,string)(modules[module] == address(0),GS102)                                    |
|                                     |                         require(bool,string)(module != address(0) && module != SENTINEL_MODULES,GS101)                         |
|            disableModule            |                         require(bool,string)(module != address(0) && module != SENTINEL_MODULES,GS101)                         |
|                                     |                                   require(bool,string)(modules[prevModule] == module,GS103)                                    |
|                                     |                                    require(bool,string)(msg.sender == address(this),GS031)                                     |
|      execTransactionFromModule      |                require(bool,string)(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0),GS104)                 |
| execTransactionFromModuleReturnData |                require(bool,string)(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0),GS104)                 |
|           isModuleEnabled           |                                                                                                                                |
|         getModulesPaginated         |                                                                                                                                |
|               execute               |                                                                                                                                |
|               receive               |                                                                                                                                |
|           execTransaction           |             require(bool,string)(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0,GS025)              |
|                                     |                              require(bool,string)(transferToken(gasToken,receiver,payment),GS012)                              |
|                                     |                 require(bool,string)(gasleft()() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500,GS010)                 |
|                                     |                                                     require(bool)(b <= a)                                                      |
|                                     | require(bool,string)(ISignatureValidator(currentOwner).isValidSignature(data,contractSignature) == EIP1271_MAGIC_VALUE,GS024)  |
|                                     | require(bool,string)(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS,GS026)  |
|                                     |                              require(bool,string)(uint256(s) >= requiredSignatures.mul(65),GS021)                              |
|                                     |                                                   require(bool)(c / a == b)                                                    |
|                                     |                                           require(bool,string)(_threshold > 0,GS001)                                           |
|                                     |                                       require(bool,string)(receiver.send(payment),GS011)                                       |
|                                     |                                                     require(bool)(c >= a)                                                      |
|                                     |                              require(bool,string)(uint256(s).add(32) <= signatures.length,GS022)                               |
|                                     |                 require(bool,string)(uint256(s).add(32).add(contractSignatureLen) <= signatures.length,GS023)                  |
|                                     |                             require(bool,string)(success || safeTxGas != 0 || gasPrice != 0,GS013)                             |
|                                     |                          require(bool,string)(signatures.length >= requiredSignatures.mul(65),GS020)                           |
|      execTransactionFromModule      |                require(bool,string)(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0),GS104)                 |
| slitherConstructorConstantVariables |                                                                                                                                |
+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------+

Contract Guard
+---------------------+-------------------+
|       Function      | require or assert |
+---------------------+-------------------+
|   checkTransaction  |                   |
| checkAfterExecution |                   |
+---------------------+-------------------+

Contract Enum
+----------+-------------------+
| Function | require or assert |
+----------+-------------------+
+----------+-------------------+

Contract GnosisSafeMath
+----------+---------------------------+
| Function |     require or assert     |
+----------+---------------------------+
|   mul    | require(bool)(c / a == b) |
|   sub    |   require(bool)(b <= a)   |
|   add    |   require(bool)(c >= a)   |
|   max    |                           |
+----------+---------------------------+

Contract ISignatureValidator
+-------------------------------------+-------------------+
|               Function              | require or assert |
+-------------------------------------+-------------------+
|           isValidSignature          |                   |
| slitherConstructorConstantVariables |                   |
+-------------------------------------+-------------------+

Contract SafeERC20
+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
|        Function       |                                                             require or assert                                                              |
+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+
|      safeTransfer     |                       require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)                       |
|                       |                        require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)                         |
|                       |                                   require(bool,string)(isContract(target),Address: call to non-contract)                                   |
|    safeTransferFrom   |                       require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)                       |
|                       |                        require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)                         |
|                       |                                   require(bool,string)(isContract(target),Address: call to non-contract)                                   |
|      safeApprove      | require(bool,string)((value == 0) || (token.allowance(address(this),spender) == 0),SafeERC20: approve from non-zero to non-zero allowance) |
|                       |                       require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)                       |
|                       |                        require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)                         |
|                       |                                   require(bool,string)(isContract(target),Address: call to non-contract)                                   |
| safeIncreaseAllowance |                       require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)                       |
|                       |                        require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)                         |
|                       |                                   require(bool,string)(isContract(target),Address: call to non-contract)                                   |
| safeDecreaseAllowance |                           require(bool,string)(oldAllowance >= value,SafeERC20: decreased allowance below zero)                            |
|                       |                       require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)                       |
|                       |                        require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)                         |
|                       |                                   require(bool,string)(isContract(target),Address: call to non-contract)                                   |
|  _callOptionalReturn  |                       require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)                       |
|                       |                        require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)                         |
|                       |                                   require(bool,string)(isContract(target),Address: call to non-contract)                                   |
+-----------------------+--------------------------------------------------------------------------------------------------------------------------------------------+

Contract Address
+-----------------------+---------------------------------------------------------------------------------------------+
|        Function       |                                      require or assert                                      |
+-----------------------+---------------------------------------------------------------------------------------------+
|       isContract      |                                                                                             |
|       sendValue       |     require(bool,string)(address(this).balance >= amount,Address: insufficient balance)     |
|                       |   require(bool,string)(success,Address: unable to send value, recipient may have reverted)  |
|      functionCall     | require(bool,string)(address(this).balance >= value,Address: insufficient balance for call) |
|                       |            require(bool,string)(isContract(target),Address: call to non-contract)           |
|      functionCall     | require(bool,string)(address(this).balance >= value,Address: insufficient balance for call) |
|                       |            require(bool,string)(isContract(target),Address: call to non-contract)           |
| functionCallWithValue | require(bool,string)(address(this).balance >= value,Address: insufficient balance for call) |
|                       |            require(bool,string)(isContract(target),Address: call to non-contract)           |
| functionCallWithValue | require(bool,string)(address(this).balance >= value,Address: insufficient balance for call) |
|                       |            require(bool,string)(isContract(target),Address: call to non-contract)           |
|   functionStaticCall  |        require(bool,string)(isContract(target),Address: static call to non-contract)        |
|   functionStaticCall  |        require(bool,string)(isContract(target),Address: static call to non-contract)        |
|  functionDelegateCall |       require(bool,string)(isContract(target),Address: delegate call to non-contract)       |
|  functionDelegateCall |       require(bool,string)(isContract(target),Address: delegate call to non-contract)       |
|    verifyCallResult   |                                                                                             |
+-----------------------+---------------------------------------------------------------------------------------------+

Contract Counters
+-----------+-------------------------------------------------------------+
|  Function |                      require or assert                      |
+-----------+-------------------------------------------------------------+
|  current  |                                                             |
| increment |                                                             |
| decrement | require(bool,string)(value > 0,Counter: decrement overflow) |
|   reset   |                                                             |
+-----------+-------------------------------------------------------------+

Contract Strings
+-------------------------------------+-------------------------------------------------------------------+
|               Function              |                         require or assert                         |
+-------------------------------------+-------------------------------------------------------------------+
|               toString              |                                                                   |
|             toHexString             | require(bool,string)(value == 0,Strings: hex length insufficient) |
|             toHexString             | require(bool,string)(value == 0,Strings: hex length insufficient) |
| slitherConstructorConstantVariables |                                                                   |
+-------------------------------------+-------------------------------------------------------------------+

Contract Timers
+-------------+-------------------+
|   Function  | require or assert |
+-------------+-------------------+
| getDeadline |                   |
| setDeadline |                   |
|    reset    |                   |
|   isUnset   |                   |
|  isStarted  |                   |
|  isPending  |                   |
|  isExpired  |                   |
| getDeadline |                   |
| setDeadline |                   |
|    reset    |                   |
|   isUnset   |                   |
|  isStarted  |                   |
|  isPending  |                   |
|  isExpired  |                   |
+-------------+-------------------+

Contract ECDSA
+------------------------+-------------------+
|        Function        | require or assert |
+------------------------+-------------------+
|      _throwError       |                   |
|       tryRecover       |                   |
|        recover         |                   |
|       tryRecover       |                   |
|        recover         |                   |
|       tryRecover       |                   |
|        recover         |                   |
| toEthSignedMessageHash |                   |
| toEthSignedMessageHash |                   |
|    toTypedDataHash     |                   |
+------------------------+-------------------+

Contract SafeCast
+-----------+--------------------------------------------------------------------------------------------------------------------------+
|  Function |                                                    require or assert                                                     |
+-----------+--------------------------------------------------------------------------------------------------------------------------+
| toUint224 |                require(bool,string)(value <= type()(uint224).max,SafeCast: value doesn't fit in 224 bits)                |
| toUint128 |                require(bool,string)(value <= type()(uint128).max,SafeCast: value doesn't fit in 128 bits)                |
|  toUint96 |                 require(bool,string)(value <= type()(uint96).max,SafeCast: value doesn't fit in 96 bits)                 |
|  toUint64 |                 require(bool,string)(value <= type()(uint64).max,SafeCast: value doesn't fit in 64 bits)                 |
|  toUint32 |                 require(bool,string)(value <= type()(uint32).max,SafeCast: value doesn't fit in 32 bits)                 |
|  toUint16 |                 require(bool,string)(value <= type()(uint16).max,SafeCast: value doesn't fit in 16 bits)                 |
|  toUint8  |                  require(bool,string)(value <= type()(uint8).max,SafeCast: value doesn't fit in 8 bits)                  |
| toUint256 |                            require(bool,string)(value >= 0,SafeCast: value must be positive)                             |
|  toInt128 | require(bool,string)(value >= type()(int128).min && value <= type()(int128).max,SafeCast: value doesn't fit in 128 bits) |
|  toInt64  |  require(bool,string)(value >= type()(int64).min && value <= type()(int64).max,SafeCast: value doesn't fit in 64 bits)   |
|  toInt32  |  require(bool,string)(value >= type()(int32).min && value <= type()(int32).max,SafeCast: value doesn't fit in 32 bits)   |
|  toInt16  |  require(bool,string)(value >= type()(int16).min && value <= type()(int16).max,SafeCast: value doesn't fit in 16 bits)   |
|   toInt8  |    require(bool,string)(value >= type()(int8).min && value <= type()(int8).max,SafeCast: value doesn't fit in 8 bits)    |
|  toInt256 |           require(bool,string)(value <= uint256(type()(int256).max),SafeCast: value doesn't fit in an int256)            |
+-----------+--------------------------------------------------------------------------------------------------------------------------+

Contract DoubleEndedQueue
+-----------+--------------------------------------------------------------------------------------------------------------------------+
|  Function |                                                    require or assert                                                     |
+-----------+--------------------------------------------------------------------------------------------------------------------------+
|  pushBack |                                                                                                                          |
|  popBack  |                                                                                                                          |
| pushFront |                                                                                                                          |
|  popFront |                                                                                                                          |
|   front   |                                                                                                                          |
|    back   |                                                                                                                          |
|     at    | require(bool,string)(value >= type()(int128).min && value <= type()(int128).max,SafeCast: value doesn't fit in 128 bits) |
|           |           require(bool,string)(value <= uint256(type()(int256).max),SafeCast: value doesn't fit in an int256)            |
|   clear   |                                                                                                                          |
|   length  |                                                                                                                          |
|   empty   |                                                                                                                          |
+-----------+--------------------------------------------------------------------------------------------------------------------------+

Contract Babylonian
+----------+-------------------+
| Function | require or assert |
+----------+-------------------+
|   sqrt   |                   |
+----------+-------------------+

Contract BitMath
+---------------------+----------------------------------------------------------------+
|       Function      |                       require or assert                        |
+---------------------+----------------------------------------------------------------+
|  mostSignificantBit | require(bool,string)(x > 0,BitMath::mostSignificantBit: zero)  |
| leastSignificantBit | require(bool,string)(x > 0,BitMath::leastSignificantBit: zero) |
+---------------------+----------------------------------------------------------------+

Contract FixedPoint
+-------------------------------------+--------------------------------------------------------------------------------------------+
|               Function              |                                     require or assert                                      |
+-------------------------------------+--------------------------------------------------------------------------------------------+
|                encode               |                                                                                            |
|              encode144              |                                                                                            |
|                decode               |                                                                                            |
|              decode144              |                                                                                            |
|                 mul                 | require(bool,string)(y == 0 || (z = self._x * y) / y == self._x,FixedPoint::mul: overflow) |
|                 muli                |               require(bool,string)(z < 2 ** 255,FixedPoint::muli: overflow)                |
|                                     |                   require(bool,string)(h < d,FullMath: FULLDIV_OVERFLOW)                   |
|                muluq                |    require(bool,string)(upper <= type()(uint112).max,FixedPoint::muluq: upper overflow)    |
|                                     |      require(bool,string)(sum <= type()(uint224).max,FixedPoint::muluq: sum overflow)      |
|                divuq                |      require(bool,string)(result <= type()(uint224).max,FixedPoint::divuq: overflow)       |
|                                     |                   require(bool,string)(h < d,FullMath: FULLDIV_OVERFLOW)                   |
|                                     |       require(bool,string)(value <= type()(uint224).max,FixedPoint::divuq: overflow)       |
|                                     |           require(bool,string)(other._x > 0,FixedPoint::divuq: division by zero)           |
|               fraction              |        require(bool,string)(denominator > 0,FixedPoint::fraction: division by zero)        |
|                                     |     require(bool,string)(result <= type()(uint224).max,FixedPoint::fraction: overflow)     |
|                                     |                   require(bool,string)(h < d,FullMath: FULLDIV_OVERFLOW)                   |
|                                     | require(bool,string)(result_scope_0 <= type()(uint224).max,FixedPoint::fraction: overflow) |
|              reciprocal             |       require(bool,string)(self._x != 0,FixedPoint::reciprocal: reciprocal of zero)        |
|                                     |            require(bool,string)(self._x != 1,FixedPoint::reciprocal: overflow)             |
|                 sqrt                |               require(bool,string)(x > 0,BitMath::mostSignificantBit: zero)                |
| slitherConstructorConstantVariables |                                                                                            |
+-------------------------------------+--------------------------------------------------------------------------------------------+

Contract FullMath
+----------+--------------------------------------------------------+
| Function |                   require or assert                    |
+----------+--------------------------------------------------------+
| fullMul  |                                                        |
| fullDiv  |                                                        |
|  mulDiv  | require(bool,string)(h < d,FullMath: FULLDIV_OVERFLOW) |
+----------+--------------------------------------------------------+

Contract TransferHelper
+------------------+----------------------------------------------------------------------------------------------------------------------------------+
|     Function     |                                                        require or assert                                                         |
+------------------+----------------------------------------------------------------------------------------------------------------------------------+
|   safeApprove    |    require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeApprove: approve failed)    |
|   safeTransfer   |   require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::safeTransfer: transfer failed)   |
| safeTransferFrom | require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),TransferHelper::transferFrom: transferFrom failed) |
| safeTransferETH  |                        require(bool,string)(success,TransferHelper::safeTransferETH: ETH transfer failed)                        |
+------------------+----------------------------------------------------------------------------------------------------------------------------------+

Contract IERC20
+--------------+-------------------+
|   Function   | require or assert |
+--------------+-------------------+
|     name     |                   |
|    symbol    |                   |
|   decimals   |                   |
| totalSupply  |                   |
|  balanceOf   |                   |
|  allowance   |                   |
|   approve    |                   |
|   transfer   |                   |
| transferFrom |                   |
+--------------+-------------------+

Contract IUniswapV2Callee
+---------------+-------------------+
|    Function   | require or assert |
+---------------+-------------------+
| uniswapV2Call |                   |
+---------------+-------------------+

Contract IUniswapV2ERC20
+------------------+-------------------+
|     Function     | require or assert |
+------------------+-------------------+
|       name       |                   |
|      symbol      |                   |
|     decimals     |                   |
|   totalSupply    |                   |
|    balanceOf     |                   |
|    allowance     |                   |
|     approve      |                   |
|     transfer     |                   |
|   transferFrom   |                   |
| DOMAIN_SEPARATOR |                   |
| PERMIT_TYPEHASH  |                   |
|      nonces      |                   |
|      permit      |                   |
+------------------+-------------------+

Contract IUniswapV2Factory
+----------------+-------------------+
|    Function    | require or assert |
+----------------+-------------------+
|     feeTo      |                   |
|  feeToSetter   |                   |
|    getPair     |                   |
|    allPairs    |                   |
| allPairsLength |                   |
|   createPair   |                   |
|    setFeeTo    |                   |
| setFeeToSetter |                   |
+----------------+-------------------+

Contract IUniswapV2Pair
+----------------------+-------------------+
|       Function       | require or assert |
+----------------------+-------------------+
|         name         |                   |
|        symbol        |                   |
|       decimals       |                   |
|     totalSupply      |                   |
|      balanceOf       |                   |
|      allowance       |                   |
|       approve        |                   |
|       transfer       |                   |
|     transferFrom     |                   |
|   DOMAIN_SEPARATOR   |                   |
|   PERMIT_TYPEHASH    |                   |
|        nonces        |                   |
|        permit        |                   |
|  MINIMUM_LIQUIDITY   |                   |
|       factory        |                   |
|        token0        |                   |
|        token1        |                   |
|     getReserves      |                   |
| price0CumulativeLast |                   |
| price1CumulativeLast |                   |
|        kLast         |                   |
|         mint         |                   |
|         burn         |                   |
|         swap         |                   |
|         skim         |                   |
|         sync         |                   |
|      initialize      |                   |
+----------------------+-------------------+

Contract IERC20
+--------------+-------------------+
|   Function   | require or assert |
+--------------+-------------------+
|     name     |                   |
|    symbol    |                   |
|   decimals   |                   |
| totalSupply  |                   |
|  balanceOf   |                   |
|  allowance   |                   |
|   approve    |                   |
|   transfer   |                   |
| transferFrom |                   |
+--------------+-------------------+

Contract IUniswapV2Router02
+-----------------------------------------------------------+-------------------+
|                          Function                         | require or assert |
+-----------------------------------------------------------+-------------------+
|                          factory                          |                   |
|                            WETH                           |                   |
|                        addLiquidity                       |                   |
|                      addLiquidityETH                      |                   |
|                      removeLiquidity                      |                   |
|                     removeLiquidityETH                    |                   |
|                 removeLiquidityWithPermit                 |                   |
|                removeLiquidityETHWithPermit               |                   |
|                  swapExactTokensForTokens                 |                   |
|                  swapTokensForExactTokens                 |                   |
|                   swapExactETHForTokens                   |                   |
|                   swapTokensForExactETH                   |                   |
|                   swapExactTokensForETH                   |                   |
|                   swapETHForExactTokens                   |                   |
|                           quote                           |                   |
|                        getAmountOut                       |                   |
|                        getAmountIn                        |                   |
|                       getAmountsOut                       |                   |
|                        getAmountsIn                       |                   |
|      removeLiquidityETHSupportingFeeOnTransferTokens      |                   |
| removeLiquidityETHWithPermitSupportingFeeOnTransferTokens |                   |
|   swapExactTokensForTokensSupportingFeeOnTransferTokens   |                   |
|     swapExactETHForTokensSupportingFeeOnTransferTokens    |                   |
|     swapExactTokensForETHSupportingFeeOnTransferTokens    |                   |
+-----------------------------------------------------------+-------------------+

Contract IWETH
+----------+-------------------+
| Function | require or assert |
+----------+-------------------+
| deposit  |                   |
| transfer |                   |
| withdraw |                   |
+----------+-------------------+

Contract GovernorBravoOLA
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|               Function              |                                                                          require or assert                                                                          |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|             constructor             |                                                                                                                                                                     |
|          supportsInterface          |                                                                                                                                                                     |
|                state                |                                                                                                                                                                     |
|               timelock              |                                                                                                                                                                     |
|             proposalEta             |                                                                                                                                                                     |
|                queue                |                                 require(bool,string)(state(proposalId) == ProposalState.Succeeded,Governor: proposal not successful)                                |
|               _execute              |                                                                                                                                                                     |
|               _cancel               |     require(bool,string)(status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,Governor: proposal not active)     |
|              _executor              |                                                                                                                                                                     |
|            updateTimelock           |                                              require(bool,string)(_msgSender() == _executor(),Governor: onlyGovernance)                                             |
|           _updateTimelock           |                                                                                                                                                                     |
|             constructor             |                                                                                                                                                                     |
|               receive               |                                                             require(bool)(_executor() == address(this))                                                             |
|          supportsInterface          |                                                                                                                                                                     |
|                 name                |                                                                                                                                                                     |
|               version               |                                                                                                                                                                     |
|             hashProposal            |                                                                                                                                                                     |
|                state                |                                                                                                                                                                     |
|           proposalSnapshot          |                                                                                                                                                                     |
|           proposalDeadline          |                                                                                                                                                                     |
|          proposalThreshold          |                                                                                                                                                                     |
|            _quorumReached           |                                                                                                                                                                     |
|            _voteSucceeded           |                                                                                                                                                                     |
|              _getVotes              |                                                                                                                                                                     |
|              _countVote             |                                                                                                                                                                     |
|            _defaultParams           |                                                                                                                                                                     |
|               propose               |                                       require(bool,string)(value <= type()(uint64).max,SafeCast: value doesn't fit in 64 bits)                                      |
|                                     |                                       require(bool,string)(targets.length == values.length,Governor: invalid proposal length)                                       |
|                                     |                require(bool,string)(getVotes(_msgSender(),block.number - 1) >= proposalThreshold(),Governor: proposer votes below proposal threshold)               |
|                                     |                                      require(bool,string)(targets.length == calldatas.length,Governor: invalid proposal length)                                     |
|                                     |                                         require(bool,string)(proposal.voteStart.isUnset(),Governor: proposal already exists)                                        |
|                                     |                                                  require(bool,string)(targets.length > 0,Governor: empty proposal)                                                  |
|               execute               |                     require(bool,string)(status == ProposalState.Succeeded || status == ProposalState.Queued,Governor: proposal not successful)                     |
|               _execute              |                                                                                                                                                                     |
|            _beforeExecute           |                                                                                                                                                                     |
|            _afterExecute            |                                                                                                                                                                     |
|               _cancel               |     require(bool,string)(status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,Governor: proposal not active)     |
|               getVotes              |                                                                                                                                                                     |
|          getVotesWithParams         |                                                                                                                                                                     |
|               castVote              |                                        require(bool,string)(! receipt.hasVoted,GovernorCompatibilityBravo: vote already cast)                                       |
|                                     |                                 require(bool,string)(state(proposalId) == ProposalState.Active,Governor: vote not currently active)                                 |
|                                     |                                       require(bool,string)(value <= type()(uint96).max,SafeCast: value doesn't fit in 96 bits)                                      |
|          castVoteWithReason         |                                        require(bool,string)(! receipt.hasVoted,GovernorCompatibilityBravo: vote already cast)                                       |
|                                     |                                 require(bool,string)(state(proposalId) == ProposalState.Active,Governor: vote not currently active)                                 |
|                                     |                                       require(bool,string)(value <= type()(uint96).max,SafeCast: value doesn't fit in 96 bits)                                      |
|     castVoteWithReasonAndParams     |                                        require(bool,string)(! receipt.hasVoted,GovernorCompatibilityBravo: vote already cast)                                       |
|                                     |                                 require(bool,string)(state(proposalId) == ProposalState.Active,Governor: vote not currently active)                                 |
|                                     |                                       require(bool,string)(value <= type()(uint96).max,SafeCast: value doesn't fit in 96 bits)                                      |
|            castVoteBySig            |                                        require(bool,string)(! receipt.hasVoted,GovernorCompatibilityBravo: vote already cast)                                       |
|                                     |                                 require(bool,string)(state(proposalId) == ProposalState.Active,Governor: vote not currently active)                                 |
|                                     |                                       require(bool,string)(value <= type()(uint96).max,SafeCast: value doesn't fit in 96 bits)                                      |
|   castVoteWithReasonAndParamsBySig  |                                        require(bool,string)(! receipt.hasVoted,GovernorCompatibilityBravo: vote already cast)                                       |
|                                     |                                 require(bool,string)(state(proposalId) == ProposalState.Active,Governor: vote not currently active)                                 |
|                                     |                                       require(bool,string)(value <= type()(uint96).max,SafeCast: value doesn't fit in 96 bits)                                      |
|              _castVote              |                                        require(bool,string)(! receipt.hasVoted,GovernorCompatibilityBravo: vote already cast)                                       |
|                                     |                                 require(bool,string)(state(proposalId) == ProposalState.Active,Governor: vote not currently active)                                 |
|                                     |                                       require(bool,string)(value <= type()(uint96).max,SafeCast: value doesn't fit in 96 bits)                                      |
|              _castVote              |                                        require(bool,string)(! receipt.hasVoted,GovernorCompatibilityBravo: vote already cast)                                       |
|                                     |                                 require(bool,string)(state(proposalId) == ProposalState.Active,Governor: vote not currently active)                                 |
|                                     |                                       require(bool,string)(value <= type()(uint96).max,SafeCast: value doesn't fit in 96 bits)                                      |
|                relay                |                                              require(bool,string)(_msgSender() == _executor(),Governor: onlyGovernance)                                             |
|                                     |                                     require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)                                     |
|                                     |                                                require(bool,string)(isContract(target),Address: call to non-contract)                                               |
|              _executor              |                                                                                                                                                                     |
|           onERC721Received          |                                                                                                                                                                     |
|          onERC1155Received          |                                                                                                                                                                     |
|        onERC1155BatchReceived       |                                                                                                                                                                     |
|          onERC1155Received          |                                                                                                                                                                     |
|        onERC1155BatchReceived       |                                                                                                                                                                     |
|          supportsInterface          |                                                                                                                                                                     |
|           onERC721Received          |                                                                                                                                                                     |
|                 name                |                                                                                                                                                                     |
|               version               |                                                                                                                                                                     |
|            COUNTING_MODE            |                                                                                                                                                                     |
|             hashProposal            |                                                                                                                                                                     |
|                state                |                                                                                                                                                                     |
|           proposalSnapshot          |                                                                                                                                                                     |
|           proposalDeadline          |                                                                                                                                                                     |
|             votingDelay             |                                                                                                                                                                     |
|             votingPeriod            |                                                                                                                                                                     |
|                quorum               |                                                                                                                                                                     |
|               getVotes              |                                                                                                                                                                     |
|          getVotesWithParams         |                                                                                                                                                                     |
|               hasVoted              |                                                                                                                                                                     |
|               propose               |                                                                                                                                                                     |
|               execute               |                                                                                                                                                                     |
|               castVote              |                                                                                                                                                                     |
|          castVoteWithReason         |                                                                                                                                                                     |
|     castVoteWithReasonAndParams     |                                                                                                                                                                     |
|            castVoteBySig            |                                                                                                                                                                     |
|   castVoteWithReasonAndParamsBySig  |                                                                                                                                                                     |
|             constructor             |                                                                                                                                                                     |
|          _domainSeparatorV4         |                                                                                                                                                                     |
|        _buildDomainSeparator        |                                                                                                                                                                     |
|           _hashTypedDataV4          |                                                                                                                                                                     |
|          supportsInterface          |                                                                                                                                                                     |
|              _msgSender             |                                                                                                                                                                     |
|               _msgData              |                                                                                                                                                                     |
|               timelock              |                                                                                                                                                                     |
|             proposalEta             |                                                                                                                                                                     |
|                queue                |                                                                                                                                                                     |
|             constructor             |                 require(bool,string)(newQuorumNumerator <= quorumDenominator(),GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator)                 |
|           quorumNumerator           |                                                                                                                                                                     |
|          quorumDenominator          |                                                                                                                                                                     |
|                quorum               |                                                                                                                                                                     |
|        updateQuorumNumerator        |                 require(bool,string)(newQuorumNumerator <= quorumDenominator(),GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator)                 |
|                                     |                                              require(bool,string)(_msgSender() == _executor(),Governor: onlyGovernance)                                             |
|        _updateQuorumNumerator       |                 require(bool,string)(newQuorumNumerator <= quorumDenominator(),GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator)                 |
|             constructor             |                                                                                                                                                                     |
|              _getVotes              |                                                                                                                                                                     |
|            COUNTING_MODE            |                                                                                                                                                                     |
|               propose               |                                       require(bool,string)(value <= type()(uint64).max,SafeCast: value doesn't fit in 64 bits)                                      |
|                                     |                                       require(bool,string)(targets.length == values.length,Governor: invalid proposal length)                                       |
|                                     |                require(bool,string)(getVotes(_msgSender(),block.number - 1) >= proposalThreshold(),Governor: proposer votes below proposal threshold)               |
|                                     |                                      require(bool,string)(targets.length == calldatas.length,Governor: invalid proposal length)                                     |
|                                     |                                         require(bool,string)(proposal.voteStart.isUnset(),Governor: proposal already exists)                                        |
|                                     |                                                  require(bool,string)(targets.length > 0,Governor: empty proposal)                                                  |
|               propose               |                                       require(bool,string)(value <= type()(uint64).max,SafeCast: value doesn't fit in 64 bits)                                      |
|                                     |                                       require(bool,string)(targets.length == values.length,Governor: invalid proposal length)                                       |
|                                     |                require(bool,string)(getVotes(_msgSender(),block.number - 1) >= proposalThreshold(),Governor: proposer votes below proposal threshold)               |
|                                     |                                      require(bool,string)(targets.length == calldatas.length,Governor: invalid proposal length)                                     |
|                                     |                                         require(bool,string)(proposal.voteStart.isUnset(),Governor: proposal already exists)                                        |
|                                     |                                                  require(bool,string)(targets.length > 0,Governor: empty proposal)                                                  |
|                queue                |                                 require(bool,string)(state(proposalId) == ProposalState.Succeeded,Governor: proposal not successful)                                |
|               execute               |                     require(bool,string)(status == ProposalState.Succeeded || status == ProposalState.Queued,Governor: proposal not successful)                     |
|                cancel               | require(bool,string)(_msgSender() == details.proposer || getVotes(details.proposer,block.number - 1) < proposalThreshold(),GovernorBravo: proposer above threshold) |
|                                     |     require(bool,string)(status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,Governor: proposal not active)     |
|           _encodeCalldata           |                                                                                                                                                                     |
|            _storeProposal           |                                                                                                                                                                     |
|              proposals              |                                                                                                                                                                     |
|              getActions             |                                                                                                                                                                     |
|              getReceipt             |                                                                                                                                                                     |
|             quorumVotes             |                                                                                                                                                                     |
|               hasVoted              |                                                                                                                                                                     |
|            _quorumReached           |                                                                                                                                                                     |
|            _voteSucceeded           |                                                                                                                                                                     |
|              _countVote             |                                        require(bool,string)(! receipt.hasVoted,GovernorCompatibilityBravo: vote already cast)                                       |
|                                     |                                       require(bool,string)(value <= type()(uint96).max,SafeCast: value doesn't fit in 96 bits)                                      |
|             quorumVotes             |                                                                                                                                                                     |
|              proposals              |                                                                                                                                                                     |
|               propose               |                                                                                                                                                                     |
|                queue                |                                                                                                                                                                     |
|               execute               |                                                                                                                                                                     |
|                cancel               |                                                                                                                                                                     |
|              getActions             |                                                                                                                                                                     |
|              getReceipt             |                                                                                                                                                                     |
|             constructor             |                                          require(bool,string)(newVotingPeriod > 0,GovernorSettings: voting period too low)                                          |
|             votingDelay             |                                                                                                                                                                     |
|             votingPeriod            |                                                                                                                                                                     |
|          proposalThreshold          |                                                                                                                                                                     |
|            setVotingDelay           |                                              require(bool,string)(_msgSender() == _executor(),Governor: onlyGovernance)                                             |
|           setVotingPeriod           |                                              require(bool,string)(_msgSender() == _executor(),Governor: onlyGovernance)                                             |
|                                     |                                          require(bool,string)(newVotingPeriod > 0,GovernorSettings: voting period too low)                                          |
|         setProposalThreshold        |                                              require(bool,string)(_msgSender() == _executor(),Governor: onlyGovernance)                                             |
|           _setVotingDelay           |                                                                                                                                                                     |
|           _setVotingPeriod          |                                          require(bool,string)(newVotingPeriod > 0,GovernorSettings: voting period too low)                                          |
|        _setProposalThreshold        |                                                                                                                                                                     |
|             constructor             |                 require(bool,string)(newQuorumNumerator <= quorumDenominator(),GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator)                 |
|                                     |                                          require(bool,string)(newVotingPeriod > 0,GovernorSettings: voting period too low)                                          |
|                state                |                                                                                                                                                                     |
|               propose               |                                       require(bool,string)(value <= type()(uint64).max,SafeCast: value doesn't fit in 64 bits)                                      |
|                                     |                                       require(bool,string)(targets.length == values.length,Governor: invalid proposal length)                                       |
|                                     |                require(bool,string)(getVotes(_msgSender(),block.number - 1) >= proposalThreshold(),Governor: proposer votes below proposal threshold)               |
|                                     |                                      require(bool,string)(targets.length == calldatas.length,Governor: invalid proposal length)                                     |
|                                     |                                         require(bool,string)(proposal.voteStart.isUnset(),Governor: proposal already exists)                                        |
|                                     |                                                  require(bool,string)(targets.length > 0,Governor: empty proposal)                                                  |
|          proposalThreshold          |                                                                                                                                                                     |
|               _execute              |                                                                                                                                                                     |
|               _cancel               |     require(bool,string)(status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,Governor: proposal not active)     |
|              _executor              |                                                                                                                                                                     |
|          supportsInterface          |                                                                                                                                                                     |
| slitherConstructorConstantVariables |                                                                                                                                                                     |
+-------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Contract Timelock
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------+
|               Function              |                                                   require or assert                                                    |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------+
|             constructor             |                                                                                                                        |
|               receive               |                                                                                                                        |
|          supportsInterface          |                                                                                                                        |
|             isOperation             |                                                                                                                        |
|          isOperationPending         |                                                                                                                        |
|           isOperationReady          |                                                                                                                        |
|           isOperationDone           |                                                                                                                        |
|             getTimestamp            |                                                                                                                        |
|             getMinDelay             |                                                                                                                        |
|            hashOperation            |                                                                                                                        |
|          hashOperationBatch         |                                                                                                                        |
|               schedule              |                           require(bool,string)(value == 0,Strings: hex length insufficient)                            |
|                                     |                require(bool,string)(! isOperation(id),TimelockController: operation already scheduled)                 |
|                                     |                  require(bool,string)(delay >= getMinDelay(),TimelockController: insufficient delay)                   |
|            scheduleBatch            |               require(bool,string)(targets.length == values.length,TimelockController: length mismatch)                |
|                                     |                           require(bool,string)(value == 0,Strings: hex length insufficient)                            |
|                                     |              require(bool,string)(targets.length == payloads.length,TimelockController: length mismatch)               |
|                                     |                require(bool,string)(! isOperation(id),TimelockController: operation already scheduled)                 |
|                                     |                  require(bool,string)(delay >= getMinDelay(),TimelockController: insufficient delay)                   |
|              _schedule              |                require(bool,string)(! isOperation(id),TimelockController: operation already scheduled)                 |
|                                     |                  require(bool,string)(delay >= getMinDelay(),TimelockController: insufficient delay)                   |
|                cancel               |                           require(bool,string)(value == 0,Strings: hex length insufficient)                            |
|                                     |             require(bool,string)(isOperationPending(id),TimelockController: operation cannot be cancelled)             |
|               execute               |                           require(bool,string)(value == 0,Strings: hex length insufficient)                            |
|                                     |                   require(bool,string)(success,TimelockController: underlying transaction reverted)                    |
|                                     |                 require(bool,string)(isOperationReady(id),TimelockController: operation is not ready)                  |
|                                     | require(bool,string)(predecessor == bytes32(0) || isOperationDone(predecessor),TimelockController: missing dependency) |
|                                     |                 require(bool,string)(isOperationReady(id),TimelockController: operation is not ready)                  |
|             executeBatch            |                           require(bool,string)(value == 0,Strings: hex length insufficient)                            |
|                                     |                   require(bool,string)(success,TimelockController: underlying transaction reverted)                    |
|                                     |                 require(bool,string)(isOperationReady(id),TimelockController: operation is not ready)                  |
|                                     |               require(bool,string)(targets.length == values.length,TimelockController: length mismatch)                |
|                                     | require(bool,string)(predecessor == bytes32(0) || isOperationDone(predecessor),TimelockController: missing dependency) |
|                                     |              require(bool,string)(targets.length == payloads.length,TimelockController: length mismatch)               |
|                                     |                 require(bool,string)(isOperationReady(id),TimelockController: operation is not ready)                  |
|             _beforeCall             |                 require(bool,string)(isOperationReady(id),TimelockController: operation is not ready)                  |
|                                     | require(bool,string)(predecessor == bytes32(0) || isOperationDone(predecessor),TimelockController: missing dependency) |
|              _afterCall             |                 require(bool,string)(isOperationReady(id),TimelockController: operation is not ready)                  |
|                _call                |                   require(bool,string)(success,TimelockController: underlying transaction reverted)                    |
|             updateDelay             |             require(bool,string)(msg.sender == address(this),TimelockController: caller must be timelock)              |
|           onERC721Received          |                                                                                                                        |
|          onERC1155Received          |                                                                                                                        |
|        onERC1155BatchReceived       |                                                                                                                        |
|          onERC1155Received          |                                                                                                                        |
|        onERC1155BatchReceived       |                                                                                                                        |
|          supportsInterface          |                                                                                                                        |
|           onERC721Received          |                                                                                                                        |
|          supportsInterface          |                                                                                                                        |
|               hasRole               |                                                                                                                        |
|              _checkRole             |                           require(bool,string)(value == 0,Strings: hex length insufficient)                            |
|              _checkRole             |                           require(bool,string)(value == 0,Strings: hex length insufficient)                            |
|             getRoleAdmin            |                                                                                                                        |
|              grantRole              |                           require(bool,string)(value == 0,Strings: hex length insufficient)                            |
|              revokeRole             |                           require(bool,string)(value == 0,Strings: hex length insufficient)                            |
|             renounceRole            |             require(bool,string)(account == _msgSender(),AccessControl: can only renounce roles for self)              |
|              _setupRole             |                                                                                                                        |
|            _setRoleAdmin            |                                                                                                                        |
|              _grantRole             |                                                                                                                        |
|             _revokeRole             |                                                                                                                        |
|          supportsInterface          |                                                                                                                        |
|               hasRole               |                                                                                                                        |
|             getRoleAdmin            |                                                                                                                        |
|              grantRole              |                                                                                                                        |
|              revokeRole             |                                                                                                                        |
|             renounceRole            |                                                                                                                        |
|              _msgSender             |                                                                                                                        |
|               _msgData              |                                                                                                                        |
|             constructor             |                                                                                                                        |
| slitherConstructorConstantVariables |                                                                                                                        |
+-------------------------------------+------------------------------------------------------------------------------------------------------------------------+

Contract VotingEscrow
+-------------------------------------+------------------------------------------------------------------------------------------------+
|               Function              |                                       require or assert                                        |
+-------------------------------------+------------------------------------------------------------------------------------------------+
|               transfer              |                                                                                                |
|               approve               |                                                                                                |
|             transferFrom            |                                                                                                |
|              allowance              |                                                                                                |
|              delegates              |                                                                                                |
|               delegate              |                                                                                                |
|            delegateBySig            |                                                                                                |
|             totalSupply             |                                                                                                |
|              balanceOf              |                                                                                                |
|               transfer              |                                                                                                |
|              allowance              |                                                                                                |
|               approve               |                                                                                                |
|             transferFrom            |                                                                                                |
|               getVotes              |                                                                                                |
|             getPastVotes            |                                                                                                |
|          getPastTotalSupply         |                                                                                                |
|              delegates              |                                                                                                |
|               delegate              |                                                                                                |
|            delegateBySig            |                                                                                                |
|             constructor             |                                                                                                |
|             constructor             |                                                                                                |
|           getLastUserPoint          |                                                                                                |
|           getNumUserPoints          |                                                                                                |
|             getUserPoint            |                                                                                                |
|             _checkpoint             |                                                                                                |
|             _depositFor             | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|              checkpoint             |                                                                                                |
|              depositFor             |           require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)            |
|                                     | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|              createLock             |           require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)            |
|                                     | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|            increaseAmount           |           require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)            |
|                                     | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|          increaseUnlockTime         |           require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)            |
|                                     | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|               withdraw              |           require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)            |
|                                     | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|          _findPointByBlock          |                                                                                                |
|           _balanceOfLocked          |                                                                                                |
|              balanceOf              |                                                                                                |
|              lockedEnd              |                                                                                                |
|             balanceOfAt             |                                                                                                |
|               getVotes              |                                                                                                |
|            _getBlockTime            |                                                                                                |
|             getPastVotes            |                                                                                                |
|           _supplyLockedAt           |                                                                                                |
|             totalSupply             |                                                                                                |
|            totalSupplyAt            |                                                                                                |
|         totalSupplyLockedAtT        |                                                                                                |
|          totalSupplyLocked          |                                                                                                |
|          getPastTotalSupply         |                                                                                                |
| slitherConstructorConstantVariables |                                                                                                |
+-------------------------------------+------------------------------------------------------------------------------------------------+

Contract IDispenser
+-------------------+-------------------+
|      Function     | require or assert |
+-------------------+-------------------+
| distributeRewards |                   |
|      isPaused     |                   |
+-------------------+-------------------+

Contract IMultisig
+----------+-------------------+
| Function | require or assert |
+----------+-------------------+
|  create  |                   |
+----------+-------------------+

Contract IOLA
+--------------------+-------------------+
|      Function      | require or assert |
+--------------------+-------------------+
|    totalSupply     |                   |
|     balanceOf      |                   |
|      transfer      |                   |
|     allowance      |                   |
|      approve       |                   |
|    transferFrom    |                   |
|        mint        |                   |
|     timeLaunch     |                   |
|  inflationControl  |                   |
| inflationRemainder |                   |
|      decimals      |                   |
+--------------------+-------------------+

Contract IRegistry
+---------------------+-------------------+
|       Function      | require or assert |
+---------------------+-------------------+
|     totalSupply     |                   |
| tokenOfOwnerByIndex |                   |
|     tokenByIndex    |                   |
|      balanceOf      |                   |
|       ownerOf       |                   |
|   safeTransferFrom  |                   |
|   safeTransferFrom  |                   |
|     transferFrom    |                   |
|       approve       |                   |
|  setApprovalForAll  |                   |
|     getApproved     |                   |
|   isApprovedForAll  |                   |
|  supportsInterface  |                   |
|        create       |                   |
|      updateHash     |                   |
|        exists       |                   |
|       getInfo       |                   |
|   getDependencies   |                   |
|      getHashes      |                   |
|      getBaseURI     |                   |
|      setBaseURI     |                   |
+---------------------+-------------------+

Contract IService
+-------------------------------------+-------------------+
|               Function              | require or assert |
+-------------------------------------+-------------------+
|            createService            |                   |
|                update               |                   |
|         activateRegistration        |                   |
|            registerAgents           |                   |
|                deploy               |                   |
|              terminate              |                   |
|                unbond               |                   |
|               destroy               |                   |
|                exists               |                   |
|   getServiceIdsCreatedWithAgentId   |                   |
| getServiceIdsCreatedWithComponentId |                   |
|        getAgentIdsOfServiceId       |                   |
|      getComponentIdsOfServiceId     |                   |
+-------------------------------------+-------------------+

Contract ITokenomics
+-------------------------+-------------------+
|         Function        | require or assert |
+-------------------------+-------------------+
|     getCurrentEpoch     |                   |
|      effectiveBond      |                   |
|         epochLen        |                   |
|          getDF          |                   |
|         getPoint        |                   |
|       getLastPoint      |                   |
|  calculatePayoutFromLP  |                   |
| trackServicesETHRevenue |                   |
|        checkpoint       |                   |
|   getExchangeAmountOLA  |                   |
| getProfitableComponents |                   |
|   getProfitableAgents   |                   |
|         usedBond        |                   |
|      allowedNewBond     |                   |
|   accountOwnerRewards   |                   |
| calculateStakingRewards |                   |
|      isAllowedMint      |                   |
+-------------------------+-------------------+

Contract ITreasury
+------------------------+-------------------+
|        Function        | require or assert |
+------------------------+-------------------+
|   depositTokenForOLA   |                   |
| depositETHFromServices |                   |
|        withdraw        |                   |
|      enableToken       |                   |
|      disableToken      |                   |
|       isEnabled        |                   |
|       checkPair        |                   |
|      requestFunds      |                   |
|    allocateRewards     |                   |
+------------------------+-------------------+

Contract IVotingEscrow
+---------------+-------------------+
|    Function   | require or assert |
+---------------+-------------------+
|  balanceOfAt  |                   |
| totalSupplyAt |                   |
+---------------+-------------------+

Contract AgentRegistry
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
|               Function               |                                                              require or assert                                                               |
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
|             constructor              |                                                                                                                                              |
|             constructor              |                                                                                                                                              |
|                owner                 |                                                                                                                                              |
|          renounceOwnership           |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|          transferOwnership           |                             require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)                              |
|                                      |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|          _transferOwnership          |                                                                                                                                              |
|              _msgSender              |                                                                                                                                              |
|               _msgData               |                                                                                                                                              |
|          supportsInterface           |                                                                                                                                              |
|         tokenOfOwnerByIndex          |                      require(bool,string)(index < ERC721.balanceOf(owner),ERC721Enumerable: owner index out of bounds)                       |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|             totalSupply              |                                                                                                                                              |
|             tokenByIndex             |                  require(bool,string)(index < ERC721Enumerable.totalSupply(),ERC721Enumerable: global index out of bounds)                   |
|         _beforeTokenTransfer         |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|     _addTokenToOwnerEnumeration      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|   _addTokenToAllTokensEnumeration    |                                                                                                                                              |
|   _removeTokenFromOwnerEnumeration   |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
| _removeTokenFromAllTokensEnumeration |                                                                                                                                              |
|             totalSupply              |                                                                                                                                              |
|         tokenOfOwnerByIndex          |                                                                                                                                              |
|             tokenByIndex             |                                                                                                                                              |
|              balanceOf               |                                                                                                                                              |
|               ownerOf                |                                                                                                                                              |
|           safeTransferFrom           |                                                                                                                                              |
|           safeTransferFrom           |                                                                                                                                              |
|             transferFrom             |                                                                                                                                              |
|               approve                |                                                                                                                                              |
|          setApprovalForAll           |                                                                                                                                              |
|             getApproved              |                                                                                                                                              |
|           isApprovedForAll           |                                                                                                                                              |
|          supportsInterface           |                                                                                                                                              |
|             constructor              |                                                                                                                                              |
|          supportsInterface           |                                                                                                                                              |
|              balanceOf               |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|               ownerOf                |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                 name                 |                                                                                                                                              |
|                symbol                |                                                                                                                                              |
|               tokenURI               |                            require(bool,string)(_exists(tokenId),ERC721Metadata: URI query for nonexistent token)                            |
|               _baseURI               |                                                                                                                                              |
|               approve                |                                     require(bool,string)(to != owner,ERC721: approval to current owner)                                      |
|                                      | require(bool,string)(_msgSender() == owner || isApprovedForAll(owner,_msgSender()),ERC721: approve caller is not owner nor approved for all) |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|             getApproved              |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|          setApprovalForAll           |                                      require(bool,string)(owner != operator,ERC721: approve to caller)                                       |
|           isApprovedForAll           |                                                                                                                                              |
|             transferFrom             |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |               require(bool,string)(_isApprovedOrOwner(_msgSender(),tokenId),ERC721: transfer caller is not owner nor approved)               |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|                                      |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|           safeTransferFrom           |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |            require(bool,string)(_checkOnERC721Received(from,to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)            |
|                                      |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                      |               require(bool,string)(_isApprovedOrOwner(_msgSender(),tokenId),ERC721: transfer caller is not owner nor approved)               |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|                                      |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|           safeTransferFrom           |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |            require(bool,string)(_checkOnERC721Received(from,to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)            |
|                                      |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                      |               require(bool,string)(_isApprovedOrOwner(_msgSender(),tokenId),ERC721: transfer caller is not owner nor approved)               |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|                                      |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|            _safeTransfer             |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |            require(bool,string)(_checkOnERC721Received(from,to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)            |
|                                      |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                      |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|               _exists                |                                                                                                                                              |
|          _isApprovedOrOwner          |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|              _safeMint               |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |         require(bool,string)(_checkOnERC721Received(address(0),to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)         |
|                                      |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|              _safeMint               |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |         require(bool,string)(_checkOnERC721Received(address(0),to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)         |
|                                      |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|                _mint                 |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|                _burn                 |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|              _transfer               |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                      |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|               _approve               |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|          _setApprovalForAll          |                                      require(bool,string)(owner != operator,ERC721: approve to caller)                                       |
|        _checkOnERC721Received        |                                                                                                                                              |
|         _beforeTokenTransfer         |                                                                                                                                              |
|         _afterTokenTransfer          |                                                                                                                                              |
|                 name                 |                                                                                                                                              |
|                symbol                |                                                                                                                                              |
|               tokenURI               |                                                                                                                                              |
|          supportsInterface           |                                                                                                                                              |
|             constructor              |                                                                                                                                              |
|            changeManager             |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|            _setAgentInfo             |                                                                                                                                              |
|                create                |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                                  require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)                                   |
|                                      |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                                      |         require(bool,string)(_checkOnERC721Received(address(0),to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)         |
|                                      |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|              updateHash              |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                exists                |                                                                                                                                              |
|               getInfo                |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|           getDependencies            |                                                                                                                                              |
|              getHashes               |                                                                                                                                              |
|               _baseURI               |                                                                                                                                              |
|              getBaseURI              |                                                                                                                                              |
|              setBaseURI              |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
| slitherConstructorConstantVariables  |                                                                                                                                              |
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+

Contract ComponentRegistry
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
|               Function               |                                                              require or assert                                                               |
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
|             constructor              |                                                                                                                                              |
|             constructor              |                                                                                                                                              |
|                owner                 |                                                                                                                                              |
|          renounceOwnership           |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|          transferOwnership           |                             require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)                              |
|                                      |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|          _transferOwnership          |                                                                                                                                              |
|              _msgSender              |                                                                                                                                              |
|               _msgData               |                                                                                                                                              |
|          supportsInterface           |                                                                                                                                              |
|         tokenOfOwnerByIndex          |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                      require(bool,string)(index < ERC721.balanceOf(owner),ERC721Enumerable: owner index out of bounds)                       |
|             totalSupply              |                                                                                                                                              |
|             tokenByIndex             |                  require(bool,string)(index < ERC721Enumerable.totalSupply(),ERC721Enumerable: global index out of bounds)                   |
|         _beforeTokenTransfer         |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|     _addTokenToOwnerEnumeration      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|   _addTokenToAllTokensEnumeration    |                                                                                                                                              |
|   _removeTokenFromOwnerEnumeration   |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
| _removeTokenFromAllTokensEnumeration |                                                                                                                                              |
|             totalSupply              |                                                                                                                                              |
|         tokenOfOwnerByIndex          |                                                                                                                                              |
|             tokenByIndex             |                                                                                                                                              |
|              balanceOf               |                                                                                                                                              |
|               ownerOf                |                                                                                                                                              |
|           safeTransferFrom           |                                                                                                                                              |
|           safeTransferFrom           |                                                                                                                                              |
|             transferFrom             |                                                                                                                                              |
|               approve                |                                                                                                                                              |
|          setApprovalForAll           |                                                                                                                                              |
|             getApproved              |                                                                                                                                              |
|           isApprovedForAll           |                                                                                                                                              |
|          supportsInterface           |                                                                                                                                              |
|             constructor              |                                                                                                                                              |
|          supportsInterface           |                                                                                                                                              |
|              balanceOf               |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|               ownerOf                |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                 name                 |                                                                                                                                              |
|                symbol                |                                                                                                                                              |
|               tokenURI               |                            require(bool,string)(_exists(tokenId),ERC721Metadata: URI query for nonexistent token)                            |
|               _baseURI               |                                                                                                                                              |
|               approve                |                                     require(bool,string)(to != owner,ERC721: approval to current owner)                                      |
|                                      | require(bool,string)(_msgSender() == owner || isApprovedForAll(owner,_msgSender()),ERC721: approve caller is not owner nor approved for all) |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|             getApproved              |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|          setApprovalForAll           |                                      require(bool,string)(owner != operator,ERC721: approve to caller)                                       |
|           isApprovedForAll           |                                                                                                                                              |
|             transferFrom             |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                      |               require(bool,string)(_isApprovedOrOwner(_msgSender(),tokenId),ERC721: transfer caller is not owner nor approved)               |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|           safeTransferFrom           |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |            require(bool,string)(_checkOnERC721Received(from,to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)            |
|                                      |               require(bool,string)(_isApprovedOrOwner(_msgSender(),tokenId),ERC721: transfer caller is not owner nor approved)               |
|                                      |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|           safeTransferFrom           |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |            require(bool,string)(_checkOnERC721Received(from,to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)            |
|                                      |               require(bool,string)(_isApprovedOrOwner(_msgSender(),tokenId),ERC721: transfer caller is not owner nor approved)               |
|                                      |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|            _safeTransfer             |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |            require(bool,string)(_checkOnERC721Received(from,to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)            |
|                                      |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|               _exists                |                                                                                                                                              |
|          _isApprovedOrOwner          |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                      |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|              _safeMint               |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |         require(bool,string)(_checkOnERC721Received(address(0),to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)         |
|                                      |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|              _safeMint               |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |         require(bool,string)(_checkOnERC721Received(address(0),to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)         |
|                                      |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                _mint                 |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                _burn                 |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|              _transfer               |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                      |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|               _approve               |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|          _setApprovalForAll          |                                      require(bool,string)(owner != operator,ERC721: approve to caller)                                       |
|        _checkOnERC721Received        |                                                                                                                                              |
|         _beforeTokenTransfer         |                                                                                                                                              |
|         _afterTokenTransfer          |                                                                                                                                              |
|                 name                 |                                                                                                                                              |
|                symbol                |                                                                                                                                              |
|               tokenURI               |                                                                                                                                              |
|          supportsInterface           |                                                                                                                                              |
|             constructor              |                                                                                                                                              |
|            changeManager             |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|          _setComponentInfo           |                                                                                                                                              |
|                create                |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|                                      |                                  require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)                                   |
|                                      |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                      |         require(bool,string)(_checkOnERC721Received(address(0),to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)         |
|                                      |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|              updateHash              |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                exists                |                                                                                                                                              |
|               getInfo                |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|           getDependencies            |                                                                                                                                              |
|              getHashes               |                                                                                                                                              |
|               _baseURI               |                                                                                                                                              |
|              getBaseURI              |                                                                                                                                              |
|              setBaseURI              |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
| slitherConstructorConstantVariables  |                                                                                                                                              |
+--------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+

Contract RegistriesManager
+---------------------+-------------------------------------------------------------------------------------+
|       Function      |                                  require or assert                                  |
+---------------------+-------------------------------------------------------------------------------------+
|     constructor     |                                                                                     |
|        paused       |                                                                                     |
|        _pause       |                  require(bool,string)(! paused(),Pausable: paused)                  |
|       _unpause      |                 require(bool,string)(paused(),Pausable: not paused)                 |
|      _msgSender     |                                                                                     |
|       _msgData      |                                                                                     |
|     constructor     |                                                                                     |
|        owner        |                                                                                     |
|  renounceOwnership  |    require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)   |
|  transferOwnership  |    require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)   |
|                     | require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address) |
|  _transferOwnership |                                                                                     |
|     constructor     |                                                                                     |
|      mintAgent      |                  require(bool,string)(! paused(),Pausable: paused)                  |
|   updateAgentHash   |                                                                                     |
|    mintComponent    |                  require(bool,string)(! paused(),Pausable: paused)                  |
| updateComponentHash |                                                                                     |
|        pause        |    require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)   |
|                     |                  require(bool,string)(! paused(),Pausable: paused)                  |
|       unpause       |    require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)   |
|                     |                 require(bool,string)(paused(),Pausable: not paused)                 |
+---------------------+-------------------------------------------------------------------------------------+

Contract ServiceManager
+-----------------------------+-------------------------------------------------------------------------------------+
|           Function          |                                  require or assert                                  |
+-----------------------------+-------------------------------------------------------------------------------------+
|         constructor         |                                                                                     |
|            paused           |                                                                                     |
|            _pause           |                  require(bool,string)(! paused(),Pausable: paused)                  |
|           _unpause          |                 require(bool,string)(paused(),Pausable: not paused)                 |
|          _msgSender         |                                                                                     |
|           _msgData          |                                                                                     |
|         constructor         |                                                                                     |
|            owner            |                                                                                     |
|      renounceOwnership      |    require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)   |
|      transferOwnership      |    require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)   |
|                             | require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address) |
|      _transferOwnership     |                                                                                     |
|         constructor         |                                                                                     |
|           fallback          |                                                                                     |
|           receive           |                                                                                     |
|        changeTreasury       |    require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)   |
|        serviceCreate        |                  require(bool,string)(! paused(),Pausable: paused)                  |
|        serviceUpdate        |                                                                                     |
| serviceActivateRegistration |                                                                                     |
|    serviceRegisterAgents    |                                                                                     |
|        serviceDeploy        |                                                                                     |
|       serviceTerminate      |                                                                                     |
|        serviceUnbond        |                                                                                     |
|        serviceDestroy       |                                                                                     |
|        serviceReward        |                                                                                     |
|            pause            |    require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)   |
|                             |                  require(bool,string)(! paused(),Pausable: paused)                  |
|           unpause           |    require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)   |
|                             |                 require(bool,string)(paused(),Pausable: not paused)                 |
+-----------------------------+-------------------------------------------------------------------------------------+

Contract ERC20Token
+----------------------+-------------------------------------------------------------------------------------------------+
|       Function       |                                        require or assert                                        |
+----------------------+-------------------------------------------------------------------------------------------------+
|     constructor      |                                                                                                 |
|        owner         |                                                                                                 |
|  renounceOwnership   |          require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|  transferOwnership   |          require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|                      |       require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)       |
|  _transferOwnership  |                                                                                                 |
|      _msgSender      |                                                                                                 |
|       _msgData       |                                                                                                 |
|     constructor      |                                                                                                 |
|         name         |                                                                                                 |
|        symbol        |                                                                                                 |
|       decimals       |                                                                                                 |
|     totalSupply      |                                                                                                 |
|      balanceOf       |                                                                                                 |
|       transfer       |          require(bool,string)(from != address(0),ERC20: transfer from the zero address)         |
|                      |            require(bool,string)(to != address(0),ERC20: transfer to the zero address)           |
|                      |        require(bool,string)(fromBalance >= amount,ERC20: transfer amount exceeds balance)       |
|      allowance       |                                                                                                 |
|       approve        |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|                      |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|     transferFrom     |          require(bool,string)(from != address(0),ERC20: transfer from the zero address)         |
|                      |            require(bool,string)(to != address(0),ERC20: transfer to the zero address)           |
|                      |        require(bool,string)(fromBalance >= amount,ERC20: transfer amount exceeds balance)       |
|                      |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|                      |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                      |          require(bool,string)(currentAllowance >= amount,ERC20: insufficient allowance)         |
|  increaseAllowance   |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|                      |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|  decreaseAllowance   | require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero) |
|                      |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|                      |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|      _transfer       |          require(bool,string)(from != address(0),ERC20: transfer from the zero address)         |
|                      |            require(bool,string)(to != address(0),ERC20: transfer to the zero address)           |
|                      |        require(bool,string)(fromBalance >= amount,ERC20: transfer amount exceeds balance)       |
|        _mint         |           require(bool,string)(account != address(0),ERC20: mint to the zero address)           |
|        _burn         |          require(bool,string)(account != address(0),ERC20: burn from the zero address)          |
|                      |        require(bool,string)(accountBalance >= amount,ERC20: burn amount exceeds balance)        |
|       _approve       |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|                      |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|   _spendAllowance    |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|                      |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                      |          require(bool,string)(currentAllowance >= amount,ERC20: insufficient allowance)         |
| _beforeTokenTransfer |                                                                                                 |
| _afterTokenTransfer  |                                                                                                 |
|         name         |                                                                                                 |
|        symbol        |                                                                                                 |
|       decimals       |                                                                                                 |
|     totalSupply      |                                                                                                 |
|      balanceOf       |                                                                                                 |
|       transfer       |                                                                                                 |
|      allowance       |                                                                                                 |
|       approve        |                                                                                                 |
|     transferFrom     |                                                                                                 |
|     constructor      |                                                                                                 |
|         mint         |          require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|                      |           require(bool,string)(account != address(0),ERC20: mint to the zero address)           |
+----------------------+-------------------------------------------------------------------------------------------------+

Contract TestServiceRegistry
+----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
|                Function                |                                                              require or assert                                                               |
+----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+
|              constructor               |                                                                                                                                              |
|                fallback                |                                                                                                                                              |
|                receive                 |                                                                                                                                              |
|             changeManager              |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|             _initialChecks             |                                                                                                                                              |
|            _setServiceData             |                                                                                                                                              |
|             createService              |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |         require(bool,string)(_checkOnERC721Received(address(0),to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)         |
|                                        |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                                        |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|                 update                 |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|          activateRegistration          |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                        |                                  require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)                                   |
|             registerAgents             |                                  require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)                                   |
|                 deploy                 |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                 slash                  |                                                                                                                                              |
|               terminate                |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                        |                                  require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)                                   |
|                 unbond                 |                                  require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)                                   |
|                destroy                 |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|           _getAgentInstances           |                                                                                                                                              |
| _updateServiceComponentAgentConnection |                                                                                                                                              |
|                 exists                 |                                                                                                                                              |
|             getServiceInfo             |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|         getInstancesForAgentId         |                                                                                                                                              |
|            getConfigHashes             |                                                                                                                                              |
|         getAgentIdsOfServiceId         |                                                                                                                                              |
|       getComponentIdsOfServiceId       |                                                                                                                                              |
|            getServiceState             |                                                                                                                                              |
|           getOperatorBalance           |                                                                                                                                              |
|        changeMultisigPermission        |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|              constructor               |                                                                                                                                              |
|           supportsInterface            |                                                                                                                                              |
|          tokenOfOwnerByIndex           |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |                      require(bool,string)(index < ERC721.balanceOf(owner),ERC721Enumerable: owner index out of bounds)                       |
|              totalSupply               |                                                                                                                                              |
|              tokenByIndex              |                  require(bool,string)(index < ERC721Enumerable.totalSupply(),ERC721Enumerable: global index out of bounds)                   |
|          _beforeTokenTransfer          |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|      _addTokenToOwnerEnumeration       |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|    _addTokenToAllTokensEnumeration     |                                                                                                                                              |
|    _removeTokenFromOwnerEnumeration    |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|  _removeTokenFromAllTokensEnumeration  |                                                                                                                                              |
|              totalSupply               |                                                                                                                                              |
|          tokenOfOwnerByIndex           |                                                                                                                                              |
|              tokenByIndex              |                                                                                                                                              |
|               balanceOf                |                                                                                                                                              |
|                ownerOf                 |                                                                                                                                              |
|            safeTransferFrom            |                                                                                                                                              |
|            safeTransferFrom            |                                                                                                                                              |
|              transferFrom              |                                                                                                                                              |
|                approve                 |                                                                                                                                              |
|           setApprovalForAll            |                                                                                                                                              |
|              getApproved               |                                                                                                                                              |
|            isApprovedForAll            |                                                                                                                                              |
|           supportsInterface            |                                                                                                                                              |
|              constructor               |                                                                                                                                              |
|           supportsInterface            |                                                                                                                                              |
|               balanceOf                |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                ownerOf                 |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                  name                  |                                                                                                                                              |
|                 symbol                 |                                                                                                                                              |
|                tokenURI                |                            require(bool,string)(_exists(tokenId),ERC721Metadata: URI query for nonexistent token)                            |
|                _baseURI                |                                                                                                                                              |
|                approve                 |                                     require(bool,string)(to != owner,ERC721: approval to current owner)                                      |
|                                        | require(bool,string)(_msgSender() == owner || isApprovedForAll(owner,_msgSender()),ERC721: approve caller is not owner nor approved for all) |
|                                        |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|              getApproved               |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|           setApprovalForAll            |                                      require(bool,string)(owner != operator,ERC721: approve to caller)                                       |
|            isApprovedForAll            |                                                                                                                                              |
|              transferFrom              |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|                                        |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                        |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                        |               require(bool,string)(_isApprovedOrOwner(_msgSender(),tokenId),ERC721: transfer caller is not owner nor approved)               |
|                                        |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                        |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|            safeTransferFrom            |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|                                        |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                        |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                        |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                        |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|                                        |            require(bool,string)(_checkOnERC721Received(from,to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)            |
|                                        |               require(bool,string)(_isApprovedOrOwner(_msgSender(),tokenId),ERC721: transfer caller is not owner nor approved)               |
|            safeTransferFrom            |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|                                        |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|                                        |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                        |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                        |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|                                        |            require(bool,string)(_checkOnERC721Received(from,to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)            |
|                                        |               require(bool,string)(_isApprovedOrOwner(_msgSender(),tokenId),ERC721: transfer caller is not owner nor approved)               |
|             _safeTransfer              |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                                        |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                        |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|                                        |            require(bool,string)(_checkOnERC721Received(from,to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)            |
|                _exists                 |                                                                                                                                              |
|           _isApprovedOrOwner           |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                        |                             require(bool,string)(_exists(tokenId),ERC721: approved query for nonexistent token)                              |
|                                        |                             require(bool,string)(_exists(tokenId),ERC721: operator query for nonexistent token)                              |
|               _safeMint                |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |         require(bool,string)(_checkOnERC721Received(address(0),to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)         |
|                                        |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                                        |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|               _safeMint                |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |         require(bool,string)(_checkOnERC721Received(address(0),to,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer)         |
|                                        |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                                        |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|                 _mint                  |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |                                    require(bool,string)(! _exists(tokenId),ERC721: token already minted)                                     |
|                                        |                                   require(bool,string)(to != address(0),ERC721: mint to the zero address)                                    |
|                 _burn                  |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|               _transfer                |                             require(bool,string)(owner != address(0),ERC721: balance query for the zero address)                             |
|                                        |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|                                        |                         require(bool,string)(ERC721.ownerOf(tokenId) == from,ERC721: transfer from incorrect owner)                          |
|                                        |                                 require(bool,string)(to != address(0),ERC721: transfer to the zero address)                                  |
|                _approve                |                             require(bool,string)(owner != address(0),ERC721: owner query for nonexistent token)                              |
|           _setApprovalForAll           |                                      require(bool,string)(owner != operator,ERC721: approve to caller)                                       |
|         _checkOnERC721Received         |                                                                                                                                              |
|          _beforeTokenTransfer          |                                                                                                                                              |
|          _afterTokenTransfer           |                                                                                                                                              |
|                  name                  |                                                                                                                                              |
|                 symbol                 |                                                                                                                                              |
|                tokenURI                |                                                                                                                                              |
|           supportsInterface            |                                                                                                                                              |
|               _msgSender               |                                                                                                                                              |
|                _msgData                |                                                                                                                                              |
|              constructor               |                                                                                                                                              |
|                 owner                  |                                                                                                                                              |
|           renounceOwnership            |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|           transferOwnership            |                                require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)                                |
|                                        |                             require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)                              |
|           _transferOwnership           |                                                                                                                                              |
|              constructor               |                                                                                                                                              |
|            createCheckSafe             |                               require(bool,string)(gSafe.getThreshold() == threshold,Threshold does not match)                               |
|                                        |                                    require(bool,string)(gSafeInstances[i] == owners[i],Owners are wrong)                                     |
|           executeByGovernor            |                                                                                                                                              |
|            getControlValue             |                                                                                                                                              |
|  slitherConstructorConstantVariables   |                                                                                                                                              |
+----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------+

Contract Depository
+---------------------------+------------------------------------------------------------------------------------------------+
|          Function         |                                       require or assert                                        |
+---------------------------+------------------------------------------------------------------------------------------------+
|        constructor        |                                                                                                |
|           owner           |                                                                                                |
|     renounceOwnership     |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|     transferOwnership     |      require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)       |
|                           |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|     _transferOwnership    |                                                                                                |
|         _msgSender        |                                                                                                |
|          _msgData         |                                                                                                |
|        constructor        |                                                                                                |
|       changeManagers      |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|          deposit          | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                           |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|                           |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|           redeem          |                                                                                                |
|         redeemAll         |                                                                                                |
|      getPendingBonds      |                                                                                                |
|       getBondStatus       |                                                                                                |
|           create          |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|           close           |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|          isActive         |                                                                                                |
| getActiveProductsForToken |                                                                                                |
|         getProduct        |                                                                                                |
+---------------------------+------------------------------------------------------------------------------------------------+

Contract Dispenser
+-------------------------------------+------------------------------------------------------------------------------------------------+
|               Function              |                                       require or assert                                        |
+-------------------------------------+------------------------------------------------------------------------------------------------+
|             constructor             |                                                                                                |
|             constructor             |                                                                                                |
|                paused               |                                                                                                |
|                _pause               |                       require(bool,string)(! paused(),Pausable: paused)                        |
|               _unpause              |                      require(bool,string)(paused(),Pausable: not paused)                       |
|              _msgSender             |                                                                                                |
|               _msgData              |                                                                                                |
|             constructor             |                                                                                                |
|                owner                |                                                                                                |
|          renounceOwnership          |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|          transferOwnership          |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|                                     |      require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)       |
|          _transferOwnership         |                                                                                                |
|             constructor             |                                                                                                |
|           changeTokenomics          |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|         withdrawOwnerRewards        |           require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)            |
|                                     | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|                                     |                       require(bool,string)(! paused(),Pausable: paused)                        |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|        withdrawStakingRewards       |           require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)            |
|                                     | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|                                     |                       require(bool,string)(! paused(),Pausable: paused)                        |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|               receive               |                                                                                                |
| slitherConstructorConstantVariables |                                                                                                |
+-------------------------------------+------------------------------------------------------------------------------------------------+

Contract OLA
+-------------------------------------+-------------------------------------------------------------------------------------------------+
|               Function              |                                        require or assert                                        |
+-------------------------------------+-------------------------------------------------------------------------------------------------+
|             constructor             |                                                                                                 |
|                permit               |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                                     |         require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline)         |
|                                     |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|                                     |               require(bool,string)(signer == owner,ERC20Permit: invalid signature)              |
|                nonces               |                                                                                                 |
|           DOMAIN_SEPARATOR          |                                                                                                 |
|              _useNonce              |                                                                                                 |
|             constructor             |                                                                                                 |
|          _domainSeparatorV4         |                                                                                                 |
|        _buildDomainSeparator        |                                                                                                 |
|           _hashTypedDataV4          |                                                                                                 |
|                permit               |                                                                                                 |
|                nonces               |                                                                                                 |
|           DOMAIN_SEPARATOR          |                                                                                                 |
|             constructor             |                                                                                                 |
|                 name                |                                                                                                 |
|                symbol               |                                                                                                 |
|               decimals              |                                                                                                 |
|             totalSupply             |                                                                                                 |
|              balanceOf              |                                                                                                 |
|               transfer              |          require(bool,string)(from != address(0),ERC20: transfer from the zero address)         |
|                                     |            require(bool,string)(to != address(0),ERC20: transfer to the zero address)           |
|                                     |        require(bool,string)(fromBalance >= amount,ERC20: transfer amount exceeds balance)       |
|              allowance              |                                                                                                 |
|               approve               |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                                     |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|             transferFrom            |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                                     |          require(bool,string)(currentAllowance >= amount,ERC20: insufficient allowance)         |
|                                     |          require(bool,string)(from != address(0),ERC20: transfer from the zero address)         |
|                                     |            require(bool,string)(to != address(0),ERC20: transfer to the zero address)           |
|                                     |        require(bool,string)(fromBalance >= amount,ERC20: transfer amount exceeds balance)       |
|                                     |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|          increaseAllowance          |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                                     |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|          decreaseAllowance          | require(bool,string)(currentAllowance >= subtractedValue,ERC20: decreased allowance below zero) |
|                                     |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                                     |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|              _transfer              |          require(bool,string)(from != address(0),ERC20: transfer from the zero address)         |
|                                     |            require(bool,string)(to != address(0),ERC20: transfer to the zero address)           |
|                                     |        require(bool,string)(fromBalance >= amount,ERC20: transfer amount exceeds balance)       |
|                _mint                |           require(bool,string)(account != address(0),ERC20: mint to the zero address)           |
|                _burn                |        require(bool,string)(accountBalance >= amount,ERC20: burn amount exceeds balance)        |
|                                     |          require(bool,string)(account != address(0),ERC20: burn from the zero address)          |
|               _approve              |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                                     |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|           _spendAllowance           |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                                     |          require(bool,string)(currentAllowance >= amount,ERC20: insufficient allowance)         |
|                                     |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|         _beforeTokenTransfer        |                                                                                                 |
|         _afterTokenTransfer         |                                                                                                 |
|                 name                |                                                                                                 |
|                symbol               |                                                                                                 |
|               decimals              |                                                                                                 |
|             totalSupply             |                                                                                                 |
|              balanceOf              |                                                                                                 |
|               transfer              |                                                                                                 |
|              allowance              |                                                                                                 |
|               approve               |                                                                                                 |
|             transferFrom            |                                                                                                 |
|              _msgSender             |                                                                                                 |
|               _msgData              |                                                                                                 |
|                 burn                |        require(bool,string)(accountBalance >= amount,ERC20: burn amount exceeds balance)        |
|                                     |          require(bool,string)(account != address(0),ERC20: burn from the zero address)          |
|               burnFrom              |          require(bool,string)(owner != address(0),ERC20: approve from the zero address)         |
|                                     |          require(bool,string)(currentAllowance >= amount,ERC20: insufficient allowance)         |
|                                     |          require(bool,string)(account != address(0),ERC20: burn from the zero address)          |
|                                     |        require(bool,string)(accountBalance >= amount,ERC20: burn amount exceeds balance)        |
|                                     |          require(bool,string)(spender != address(0),ERC20: approve to the zero address)         |
|             constructor             |                                                                                                 |
|                owner                |                                                                                                 |
|          renounceOwnership          |          require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|          transferOwnership          |       require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)       |
|                                     |          require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|          _transferOwnership         |                                                                                                 |
|             constructor             |           require(bool,string)(account != address(0),ERC20: mint to the zero address)           |
|             changeMinter            |          require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|                 mint                |           require(bool,string)(account != address(0),ERC20: mint to the zero address)           |
|           inflationControl          |                                                                                                 |
|          inflationRemainder         |                                                                                                 |
| slitherConstructorConstantVariables |                                                                                                 |
+-------------------------------------+-------------------------------------------------------------------------------------------------+

Contract Tokenomics
+-------------------------------------+------------------------------------------------------------------------------------------------+
|               Function              |                                       require or assert                                        |
+-------------------------------------+------------------------------------------------------------------------------------------------+
|             constructor             |                                                                                                |
|                owner                |                                                                                                |
|          renounceOwnership          |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|          transferOwnership          |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|                                     |      require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)       |
|          _transferOwnership         |                                                                                                |
|              _msgSender             |                                                                                                |
|               _msgData              |                                                                                                |
|             constructor             |                                                                                                |
|            changeManagers           |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|           getCurrentEpoch           |                                                                                                |
|      changeTokenomicsParameters     |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|         changeRewardFraction        |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|     changeServiceOwnerWhiteList     |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|            isAllowedMint            |                                                                                                |
|    _getInflationRemainderForYear    |                                                                                                |
|            allowedNewBond           |                                                                                                |
|               usedBond              |                                                                                                |
|       trackServicesETHRevenue       |                                                                                                |
|       _calculateUnitTokenomics      |                                                                                                |
|           _clearEpochData           |                                                                                                |
|              checkpoint             |                               assert(bool)(z > x._x && z > y._x)                               |
|                                     |      require(bool,string)(upper <= type()(uint112).max,FixedPoint::muluq: upper overflow)      |
|                                     |       require(bool,string)(result <= type()(uint224).max,FixedPoint::fraction: overflow)       |
|                                     |                     require(bool,string)(h < d,FullMath: FULLDIV_OVERFLOW)                     |
|                                     |          require(bool,string)(denominator > 0,FixedPoint::fraction: division by zero)          |
|                                     |   require(bool,string)(result_scope_0 <= type()(uint224).max,FixedPoint::fraction: overflow)   |
|                                     |        require(bool,string)(sum <= type()(uint224).max,FixedPoint::muluq: sum overflow)        |
|            _adjustMaxBond           |                                                                                                |
|           getTopUpPerEpoch          |                                                                                                |
|             _checkpoint             |                               assert(bool)(z > x._x && z > y._x)                               |
|                                     |      require(bool,string)(upper <= type()(uint112).max,FixedPoint::muluq: upper overflow)      |
|                                     |       require(bool,string)(result <= type()(uint224).max,FixedPoint::fraction: overflow)       |
|                                     |                     require(bool,string)(h < d,FullMath: FULLDIV_OVERFLOW)                     |
|                                     |          require(bool,string)(denominator > 0,FixedPoint::fraction: division by zero)          |
|                                     |   require(bool,string)(result_scope_0 <= type()(uint224).max,FixedPoint::fraction: overflow)   |
|                                     |        require(bool,string)(sum <= type()(uint224).max,FixedPoint::muluq: sum overflow)        |
|        calculatePayoutFromLP        |         require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)         |
|                                     |       require(bool,string)(balance0 > amount0,UniswapV2: INSUFFICIENT_LIQUIDITY token0)        |
|                                     |       require(bool,string)(balance1 > amount1,UniswapV2: INSUFFICIENT_LIQUIDITY token1)        |
|                                     | require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY) |
|        _calculatePayoutFromLP       |         require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)         |
|                                     |       require(bool,string)(balance0 > amount0,UniswapV2: INSUFFICIENT_LIQUIDITY token0)        |
|                                     |       require(bool,string)(balance1 > amount1,UniswapV2: INSUFFICIENT_LIQUIDITY token1)        |
|                                     | require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY) |
|             getAmountOut            |         require(bool,string)(amountIn > 0,UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT)         |
|                                     | require(bool,string)(reserveIn > 0 && reserveOut > 0,UniswapV2Library: INSUFFICIENT_LIQUIDITY) |
|       calculateStakingRewards       |                                                                                                |
|               getPoint              |                                                                                                |
|             getLastPoint            |                                                                                                |
|                getDF                |                                                                                                |
|                 _add                |                               assert(bool)(z > x._x && z > y._x)                               |
|                getUCF               |                               assert(bool)(z > x._x && z > y._x)                               |
|                                     |      require(bool,string)(upper <= type()(uint112).max,FixedPoint::muluq: upper overflow)      |
|                                     |       require(bool,string)(result <= type()(uint224).max,FixedPoint::fraction: overflow)       |
|                                     |                     require(bool,string)(h < d,FullMath: FULLDIV_OVERFLOW)                     |
|                                     |          require(bool,string)(denominator > 0,FixedPoint::fraction: division by zero)          |
|                                     |   require(bool,string)(result_scope_0 <= type()(uint224).max,FixedPoint::fraction: overflow)   |
|                                     |        require(bool,string)(sum <= type()(uint224).max,FixedPoint::muluq: sum overflow)        |
|           getOwnerRewards           |                                                                                                |
|         accountOwnerRewards         |                                                                                                |
|     slitherConstructorVariables     |                                                                                                |
| slitherConstructorConstantVariables |                                                                                                |
+-------------------------------------+------------------------------------------------------------------------------------------------+

Contract Treasury
+-------------------------------------+------------------------------------------------------------------------------------------------+
|               Function              |                                       require or assert                                        |
+-------------------------------------+------------------------------------------------------------------------------------------------+
|             constructor             |                                                                                                |
|             constructor             |                                                                                                |
|                owner                |                                                                                                |
|          renounceOwnership          |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|          transferOwnership          |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|                                     |      require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)       |
|          _transferOwnership         |                                                                                                |
|              _msgSender             |                                                                                                |
|               _msgData              |                                                                                                |
|             constructor             |                                                                                                |
|            changeManagers           |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|          depositTokenForOLA         | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|        depositETHFromServices       |           require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)            |
|               withdraw              |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|                                     | require(bool,string)(abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed) |
|                                     |  require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)   |
|                                     |             require(bool,string)(isContract(target),Address: call to non-contract)             |
|             enableToken             |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|             disableToken            |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|              isEnabled              |                                                                                                |
|              checkPair              |                                                                                                |
|            _rebalanceETH            |                                                                                                |
|        _sendFundsToDispenser        |                                                                                                |
|           allocateRewards           |         require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)         |
|               receive               |                                                                                                |
| slitherConstructorConstantVariables |                                                                                                |
+-------------------------------------+------------------------------------------------------------------------------------------------+
. analyzed (126 contracts)
